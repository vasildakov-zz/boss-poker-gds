<?xml version="1.0" encoding="UTF-8"?>
<definitions name="GenericPortalAdapter"
	targetNamespace="http://www.bossmedia.com/wsdl/genericportaladapter"
	xmlns:tns="http://www.bossmedia.com/wsdl/genericportaladapter"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">

    <!-- GMS Generic Portal Adapter v1.3.3.0 -->
    
    <documentation> WSDL definition for the Generic Portal API. The web service endpoint is located at
        &lt;GMS Server Root URL&gt;/1-GenericPortalAdapter/GenericPortalAdapter.
        Any player related requests should append the "?X-Player=&lt;username&gt;" suffix for load balancing.
    </documentation>
    
	<types>
		<schema targetNamespace="http://www.bossmedia.com/wsdl/genericportaladapter"
			xmlns="http://www.w3.org/2001/XMLSchema">

			<!-- Protocol-specific types -->

			<simpleType name="date">
				<annotation>
					<documentation>
						A string with the format "yyyy-MM-dd", defining a date in UTC timezone. E.g. "2006-01-05"
					</documentation>
				</annotation>
				<restriction base="string">
					<pattern value="\d{4}-\d{2}-\d{2}" />
				</restriction>
			</simpleType>

			<simpleType name="dateTime">
				<annotation>
					<documentation>
					    A string with the format "yyyy-MM-dd’T’HH:mm:ss’Z’",defining a date and time in UTC timezone E.g. "2002-05-30T09:00:00Z"
					</documentation>
				</annotation>
				<restriction base="string">
					<pattern value="\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z" />
				</restriction>
			</simpleType>

			<simpleType name="uid">
			    <annotation>
			        <documentation>
			            A unique string identifier.
			        </documentation>
			    </annotation>
				<restriction base="string">
					<minLength value="1" />
					<maxLength value="50" />
				</restriction>
			</simpleType>

			<!-- Type definitions -->

			<complexType name="Money">
				<sequence>
					<element name="amount" type="decimal" >
						<annotation>
							<documentation>
								The amount of money that this object represents. 
								The amount has an arbitrary number of whole numbers 
								and always four decimal fractional numbers. 
								Ex: 56.6402 or 0.4321
							</documentation>
						</annotation>	
					</element>
					<element name="currency" type="string" >
						<annotation>
							<documentation>
								This is the upper case three character code that 
								represents a currency according to the ISO 4217 standard.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="PlayerPropertyError">
				<sequence>
					<element name="property" type="string" />
					<element name="errorType" type="string" />
				</sequence>
			</complexType>

			<complexType name="PlayerPropertyErrorCollection">
				<sequence>
					<element name="errorArray" type="tns:PlayerPropertyError"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

		    <simpleType name="PlayerPropertyKey">
			<annotation>
				<documentation>
					For <CODE>Gender</CODE>, valid values are <CODE>0</CODE> for unspecified,
					<CODE>1</CODE> for male and <CODE>2</CODE> for female.
				</documentation>
			</annotation>
		        <restriction base="string">
		            <enumeration value="TrackingCampaign"/>
		            <enumeration value="Username"/>
		            <enumeration value="Password"/>
		            <enumeration value="FirstName"/>
		            <enumeration value="LastName"/>
		            <enumeration value="NickName"/>
		            <enumeration value="Gender"/>
		            <enumeration value="BirthDate"/>
		            <enumeration value="PreferredLanguage"/>
		            <enumeration value="AcceptsEmail"/>
		            <enumeration value="AcceptsRewards"/>
		            <enumeration value="IsRewardAbuser"/>
		            <enumeration value="SecurityWord"/>
		            <enumeration value="SecurityPrompt"/>
		            <enumeration value="Newsletter"/>
		            <enumeration value="FrequentPlayerLevel"/>
		            <enumeration value="IsMessageOptoutPromo"/>
		            <enumeration value="HeardAboutUs"/>
		            <enumeration value="Currency"/>
		            <enumeration value="Title"/>
		            <enumeration value="MiddleName"/>
		            <enumeration value="AddressVerified"/>
		            <enumeration value="IdentificationVerified"/>
		            <enumeration value="TnCVersionID" />
		            <enumeration value="Citizenship" />
		            <enumeration value="AcceptsSMS"/>
		            <enumeration value="AcceptsPromotionalSMS"/>
		        	<enumeration value="PreferredCommunicationChannel" />
		        	<enumeration value="PreferredPaymentMode" />
		            <enumeration value="Email"/>
		            <enumeration value="Address1"/>
		            <enumeration value="Address2"/>
		            <enumeration value="Address3"/>
		            <enumeration value="PostalCode"/>
		            <enumeration value="City"/>
		            <enumeration value="Region"/>
		            <enumeration value="Country"/>
		            <enumeration value="Phone1"/>
		            <enumeration value="Phone2"/>
		            <enumeration value="MobilePhone"/>
		            <enumeration value="SecurityCode"/>
		            <enumeration value="SocialSecurityNumber" />
		            <enumeration value="IdentificationNumber" />
		            <enumeration value="IdentificationIssuer" />
		            <enumeration value="TaxCategory" />
		        </restriction>
		    </simpleType>
		    
			<complexType name="PlayerProperty">
				<sequence>
				    <element name="key" type="tns:PlayerPropertyKey" >
						<annotation>
							<documentation>
								A string representing a player property.
							</documentation>
						</annotation>
					</element>
					<element name="value" type="string" nillable="true" >
						<annotation>
							<documentation>
								The value is a string in a specified format that 
								represents the data type used. The format is described 
								in this document under "PlayerProperty Value Formats".
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>
			
			<complexType name="RegistrationLevelProperty">
				<sequence>				
				    <element name="name" type="tns:PlayerPropertyKey">
						<annotation>
							<documentation>
								Name of the property in GMS.
							</documentation>
						</annotation>
					</element>
					<element name="mandatory" type="boolean">
						<annotation>
							<documentation>
								If the property is mandatory or not.
							</documentation>
						</annotation>
					</element>	
					<element name="maxLength" type="long" minOccurs="0">
						<annotation>
							<documentation>
								Max characters this property can hold.
							</documentation>
						</annotation>
					</element>
					<element name="minLength" type="long" minOccurs="0">
						<annotation>
							<documentation>
								Min characters this property should have.
							</documentation>
						</annotation>
					</element>	
					<element name="regExpr" type="string" minOccurs="0">
						<annotation>
							<documentation>
								Regular Expression for this property. Used for validation.
							</documentation>
						</annotation>
					</element>
					<element name="message" type="string" minOccurs="0">
						<annotation>
							<documentation>
								Default message for this property.
							</documentation>
						</annotation>
					</element>					
				</sequence>
			</complexType>

			<complexType name="PlayerPropertyCollection">
				<sequence>
					<element name="property" type="tns:PlayerProperty"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>
			
			<complexType name="PlayerRegistrationLevelProperties">
				<sequence>
					<element name="property" type="tns:RegistrationLevelProperty"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="PlayerDetails">
				<annotation>
					<documentation>
						The data about a player that are not bound 
						to a registration level as well as the player properties.
					</documentation>
				</annotation>
				<sequence>
					<element name="playerID" type="long" >
						<annotation>
							<documentation>
								The GMS ID of the player.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the partner to whom the player belongs to.
							</documentation>
						</annotation>
					</element>
					<element name="registrationLevel" type="int" >
						<annotation>
							<documentation>
								The registration level that the player is in.
							</documentation>
						</annotation>
					</element>
					<element name="properties" type="tns:PlayerPropertyCollection" >
						<annotation>
							<documentation>
								The details about a player. The number of properties 
								returned is configured in the management system. 
								If the player has registration level 1 then the properties 
								bound to that level is returned. The player’s password 
								is however never returned.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>
			
			<complexType name="PlayerRegistrationLevel">
				<annotation>
					<documentation>
						The data about a player registration level as well as the player properties.
					</documentation>
				</annotation>
				<sequence>
					<element name="registrationLevelId" type="long" >
						<annotation>
							<documentation>
								The GMS ID of the registration level.
							</documentation>
						</annotation>
					</element>
					<element name="registrationLevelName" type="string" >
						<annotation>
							<documentation>
								The GMS Name of the registration level.
							</documentation>
						</annotation>
					</element>
					<element name="properties" type="tns:PlayerRegistrationLevelProperties" >
						<annotation>
							<documentation>
								The details about a player registration level. The number of properties 
								returned is configured in the management system.								
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>
			
			<complexType name="PlayerRegistrationLevelResult">
				<sequence>
					<element name="registrationLevels" type="tns:PlayerRegistrationLevel"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>
			
			<complexType name="PlayerRegistrationLevelRequest">
				<sequence>
					<element name="partnerUID" type="string" >
						<annotation>
							<documentation>
								The partner UID for which the registration levels are required
							</documentation>
						</annotation>
					</element>	
					<element name="languageCode" type="string" >
						<annotation>
							<documentation>
								The language in which error messages should be returned. 
							</documentation>
						</annotation>
					</element>					
				</sequence>
			</complexType>
			
			<complexType name="InitialRegistrationRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="clientUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier for the client that the player 
								uses to register. The UID must match a client 
								that is set-up in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" >
						<annotation>
							<documentation>
								The partner that the client represents. 
								The partner UID must match an existing 
								partner UID in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="ipAddress" type="string" >
						<annotation>
							<documentation>
								The IP address from the client’s computer. 
								The address should be a valid IPv4 address. 
								ex: 127.0.0.1
							</documentation>
						</annotation>
					</element>
					<element name="promotionCode" type="string" >
						<annotation>
							<documentation>
								A promotion code if entered by the player. 
								This code can entitle the player to rewards or 
								bonuses if the code is connected to an 
								active bonus campaign.
							</documentation>
						</annotation>
					</element>
					<element name="visitorID" type="string" minOccurs="0" >
						<annotation>
							<documentation>
                				A visitor id connected to the tracking campaign.
                				This parameter is optional.
							</documentation>
						</annotation>
					</element>
					<element name="registrationLevel" type="int" >
						<annotation>
							<documentation>
								The registration level that this player is 
								going to end up with when register. The 
								registration level determines what properties 
								must be available. The properties bound to a 
								specific registration level are configured in 
								the database.
							</documentation>
						</annotation>
					</element>
					<element name="properties" type="tns:PlayerPropertyCollection" >
						<annotation>
							<documentation>
								If any of the properties in the registration info 
								is invalid. Validation of properties is expected 
								to be done in the portal. This is the result of 
								an extra validation to prevent dirty data. 
								See the InvalidProperty type for more info.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="LoginRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="clientUID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies the client that the 
								player tries to login from.
							</documentation>
						</annotation>
					</element>
					<element name="clientIpAddress" type="string" >
						<annotation>
							<documentation>
								The IP address of the player’s computer.
							</documentation>
						</annotation>
					</element>
					<element name="username" type="string" >
						<annotation>
							<documentation>
								The player’s username.
							</documentation>
						</annotation>
					</element>
					<element name="password" type="string" >
						<annotation>
							<documentation>
								The player’s password.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="LoginWithTokenRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="clientUID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies the client that 
								the player tries to login from.
							</documentation>
						</annotation>
					</element>
					<element name="clientIpAddress" type="string" >
						<annotation>
							<documentation>
								The IP address of the player’s computer.
							</documentation>
						</annotation>
					</element>
					<element name="authenticationToken" type="string" >
						<annotation>
							<documentation>
								The unique authentication token for 
								the player session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="LoginResult">
				<sequence>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The session id which should be used for calls 
								to session restricted services.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="LogoutRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AccountBalanceRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AccountBalance">
				<sequence>
					<element name="balance" type="tns:Money" >
						<annotation>
							<documentation>
								The amount of money on a specific players real 
								money account.
							</documentation>
						</annotation>
					</element>
					<element name="bonusBalance" type="tns:Money" >
						<annotation>
							<documentation>
								The amount of money on a specific players bonus account. 
								This balance shows the total amount of bonus money 
								from all gaming domains.
							</documentation>
						</annotation>
					</element>
					<element name="loyaltyPoints" type="int" >
						<annotation>
							<documentation>
								The number of loyalty points that a player has.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="UsernameAvailableRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="clientUID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies the client that 
								the player tries to check the username availabillity from.
							</documentation>
						</annotation>
					</element>
					<element name="username" type="string" >
						<annotation>
							<documentation>
								The username that needs to be checked.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="UsernameAvailable">
				<sequence>
					<element name="available" type="boolean" >
						<annotation>
							<documentation>
								True if the username is available.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="GameAccountBalance">
				<sequence>
					<element name="balance" type="tns:Money" >
						<annotation>
							<documentation>
								The amount of real money that can be used for 
								transfer to the specified game.
							</documentation>
						</annotation>
					</element>
					<element name="bonusBalance" type="tns:Money" >
						<annotation>
							<documentation>
								The amount of bonus money that can be used for 
								transfer to the specified game.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="RedeemLoyaltyPointsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="nrOfPoints" type="int" >
						<annotation>
							<documentation>
								The number of loyalty points to redeem.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="DeductLoyaltyPointsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="nrOfPoints" type="int" >
						<annotation>
							<documentation>
								The number of loyalty points to deduct.
							</documentation>
						</annotation>
					</element>
					<element name="comment" type="string" >
						<annotation>
							<documentation>
								A comment describing the reason for the deduction.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="UpdatePasswordRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="oldPassword" type="string" >
						<annotation>
							<documentation>
								The player’s old password. This password must 
								match the stored password.
							</documentation>
						</annotation>
					</element>
					<element name="newPassword" type="string" >
						<annotation>
							<documentation>
								The player’s new password.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="RenewPasswordRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the partner to whom 
								the player belongs to. This parameter is optional, 
								if this parameter is not provided then the player 
								is searched based on the other provided parameter 
								called clientUID.
							</documentation>
						</annotation>
					</element>
					<element name="clientUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the game client to whom 
								the player belongs to. This parameter is optional.
							</documentation>
						</annotation>
					</element>
					<element name="username" type="string" >
						<annotation>
							<documentation>
								The username of the player that wishes to 
								renew his/her password.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="ReferAFriendRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="friendsName" type="string" >
						<annotation>
							<documentation>
								The full name of the friend that is referred.
							</documentation>
						</annotation>
					</element>
					<element name="friendsEmail" type="string" >
						<annotation>
							<documentation>
								The email address of the friend that is referred.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="ActivationRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="activationCode" type="string" >
						<annotation>
							<documentation>
								The activation code sent by email to the player when he/she registers.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="EmailVerificationRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="verificationCode" type="string" >
						<annotation>
							<documentation>
								The verification code sent by email to 
								the player.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

		    <complexType name="SMSVerificationRequest">
		        <sequence>
		            <element name="systemUID" type="string" >
		                <annotation>
		                    <documentation>
		                        The unique identifier of the calling system. 
		                        The UID must match a system that is set-up in 
		                        the management system.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="verificationCode" type="string" >
		                <annotation>
		                    <documentation>
		                        The verification code sent by SMS to 
		                        the player.
		                    </documentation>
		                </annotation>
		            </element>
		        </sequence>
		    </complexType>

		    <complexType name="UpdatePlayerDetailsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="registrationLevel" type="int" >
						<annotation>
							<documentation>
								The registration level that the player should be in. 
								This level dictated the number of properties 
								required in the properties parameter.
							</documentation>
						</annotation>
					</element>
					<element name="properties" type="tns:PlayerPropertyCollection" >
						<annotation>
							<documentation>
								The details about a player. The number of properties 
								returned is configured in the management system. 
								If the player has registration level 1 then the 
								properties bound to that level is returned.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="PlayerDetailsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="VerifyAuthenticationTokenRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="token" type="string" >
						<annotation>
							<documentation>
								The authentication token that can be used to 
								verify that a player is valid.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="Void">
				<!-- type used to indicate void return -->
			</complexType>

			<element name="Void" type="tns:Void" />

			<complexType name="GetNickNameRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the game system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the player session. 
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="GetAllNickNamesRequest">
				<sequence>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the player session. 
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="SetNickNameRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the game system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the player session. 
							</documentation>
						</annotation>
					</element>
					<element name="nickName" type="string" >
						<annotation>
							<documentation>
								The player’s game system specific nickname to set
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AllNickNames">
				<annotation>
					<documentation>
						Contains player’s preferred nickname if exist 
						and List of GameSystemNickName(s) 
					</documentation>
				</annotation>
				<sequence>
					<element name="preferredNickName" type="string" nillable="true"/>
					<element name="gameSystemNickNames" type="tns:GameSystemNickName" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="NickName">
				<sequence>
					<element name="nickName" type="string" />
				</sequence>
			</complexType>

			<complexType name="GameSystemNickName">
				<sequence>
					<element name="systemUID" type="string" />
					<element name="gameSystemName" type="string" />
					<element name="nickName" type="string" />
				</sequence>
			</complexType>

			<complexType name="GameAccountBalanceRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="playerSessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="gameUID" type="string" >
						<annotation>
							<documentation>
								gameUID	String	The unique identifier for the game.
							</documentation>
						</annotation>
					</element>
					<element name="currency" type="string" >
						<annotation>
							<documentation>
								This is the upper case three character code 
								that represents a currency according to the ISO 4217 standard.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AuthenticationToken">
				<sequence>
					<element name="token" type="string" >
						<annotation>
							<documentation>
								A token that uniquely identifies a players session
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AuthenticationTokenRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="BonusRewardDetails">
				<sequence>
					<element name="details" type="tns:BonusRewardDetail"
						minOccurs="0" maxOccurs="unbounded" >
						<annotation>
							<documentation>
								A list of bonus reward transactions.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="BonusRewardDetail">
				<sequence>
					<element name="creationTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								When the bonus reward is created. This property 
								is formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
					<element name="gamingDomain" type="string" >
						<annotation>
							<documentation>
								The gaming domain this bonus reward is valid for. 
								If it is not set it is valid for any gaming domain.
							</documentation>
						</annotation>
					</element>
					<element name="requiredHandle" type="tns:Money" >
						<annotation>
							<documentation>
								The total required amount to be wagered in order 
								to fulfil the set turn/wagering requirements for 
								the received bonus money. 
							</documentation>
						</annotation>
					</element>
					<element name="currentHandle" type="tns:Money" >
						<annotation>
							<documentation>
								The total amount of wagered money that can be 
								accounted for and has an impact on when bonus 
								money may be converted into real money.
							</documentation>
						</annotation>
					</element>
					<element name="balance" type="tns:Money" />
				</sequence>
			</complexType>

			<complexType name="BonusRewardDetailsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="PendingPayoutDetails">
				<annotation>
					<documentation>
						A list of pending payouts transactions.
					</documentation>
				</annotation>
				<sequence>
					<element name="details" type="tns:PendingPayoutDetail"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="PendingPayoutDetail">
				<sequence>
					<element name="creationTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								When the pending payout is created. 
								This property is formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
					<element name="gamingDomain" type="string" >
						<annotation>
							<documentation>
								The gaming domain this pending is valid for. 
								If it is not set it is valid for any gaming domain.
							</documentation>
						</annotation>
					</element>
					<element name="requiredQualifyHandle" type="tns:Money" />
					<element name="currentQualifyHandle" type="tns:Money" />
					<element name="amount" type="tns:Money" />
				</sequence>
			</complexType>

			<complexType name="PendingPayoutDetailsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="GetReferAFriendStatusRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a players ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="ReferAFriendDetails">
				<annotation>
					<documentation>
						A list of referred friends.
					</documentation>
				</annotation>
				<sequence>
					<element name="details" type="tns:ReferAFriendDetail"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="ReferAFriendDetail">
				<sequence>
					<element name="referralTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								When the referral is made. This property is 
								formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
					<element name="referredName" type="string" >
						<annotation>
							<documentation>
								The name of the referred friend.
							</documentation>
						</annotation>
					</element>
					<element name="referredEmail" type="string" >
						<annotation>
							<documentation>
								The email of the referred friend.
							</documentation>
						</annotation>
					</element>
					<element name="state" type="int" >
						<annotation>
							<documentation>
								State of the referral.
								1 - Referred: Friend has been referred but not taken any action.
								2 - Registered: Friend has registered but not yet placed any real money wager.
								3 - Active: Friend has placed a real money bet. 
								4 - Expired: Friend has not placed a real money bet within time period.								
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="RewardTransactions">
				<annotation>
					<documentation>
						A list of bonus reward transactions.
					</documentation>
				</annotation>
				<sequence>
					<element name="details" type="tns:RewardTransaction"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="RewardTransaction">
				<sequence>
					<element name="transactionTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								When the transaction was made. This property is 
								formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
					<element name="transactionType">
						<annotation>
							<documentation>
								Type of transaction 
								1 - Bonus Payout
								2 - Pending Bonus Payout
								3 - Manual Bonus Payout
								4 - Manual Pending Bonus Payout
								10 - Pending Bonus To Bonus Conversion
								11 - Bonus To Real Conversion
								40 - Bonus Removal
								41 - Pending Bonus Removal
								51 - Loyalty Points Conversion
								52 - Loyalty Points Manual Correction
								60 - Bonus Expiration
								61 - Pending Bonus Expiration								
							</documentation>
						</annotation>
						<xsd:simpleType>
							<xsd:restriction base="int">
								<xsd:minInclusive value="1" />
								<xsd:maxInclusive value="61" />
							</xsd:restriction>
						</xsd:simpleType>
					</element>
					<element name="amount" type="decimal" >
						<annotation>
							<documentation>
								The amount of the transaction
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="RewardTransactionsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="from" type="tns:date" >
						<annotation>
							<documentation>
								The date to search from. This property must 
								be formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="to" type="tns:date" >
						<annotation>
							<documentation>
								The date to search to. This property must 
								be formatted as a date.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="GamingTransactions">
				<annotation>
					<documentation>
						A list of gaming transactions, where the amounts are 
						in the players own currency.
					</documentation>
				</annotation>
				<sequence>
					<element name="details" type="tns:GamingTransaction"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

		    <complexType name="GamingTransaction">
		        <sequence>
		            <element name="transactionTime" type="tns:dateTime" >
		                <annotation>
		                    <documentation>
		                        When the transaction was made. This property is 
		                        formatted as a dateTime.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="gameSessionId" type="string" >
		                <annotation>
		                    <documentation>
		                        The external id of the game session.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="gameName" type="string" >
		                <annotation>
		                    <documentation>
		                        The name of the game.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="gamingDomain" type="string" >
		                <annotation>
		                    <documentation>
		                        The gaming domain that the game belongs to.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="wagerAmount" type="decimal" >
		                <annotation>
		                    <documentation>
		                        The amount of the wager, in the players own currency.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="winAmount" type="decimal" >
		                <annotation>
		                    <documentation>
		                        The amount of the win, in the players own currency.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="gameId" type="string" >
		                <annotation>
		                    <documentation>
		                        The external id of the game.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="wagerCount" type="long">
		                <annotation>
		                    <documentation>
		                        The number of wagers.
		                    </documentation>
		                </annotation>
		            </element>                    
		            <element name="eboGameSessionId" type="string" minOccurs="0">
		                <annotation>
		                    <documentation>
		                        Optional EBO id of the game session.
		                    </documentation>
		                </annotation>
		            </element>                    
		            <element name="moneyTransfer" type="tns:MoneyTransfer" minOccurs="0" maxOccurs="unbounded" >
		                <annotation>
		                    <documentation>
		                        Optional list of transfers for the gaming transaction.
		                    </documentation>
		                </annotation>
		            </element>                    
		        </sequence>
		    </complexType>

		    <complexType name="MoneyTransfer">
		        <sequence>
		            <element name="transactionTime" type="tns:dateTime" >
		                <annotation>
		                    <documentation>
		                        When the transaction was made. This property is 
		                        formatted as a dateTime.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="externalTransferId" type="string" >
		                <annotation>
		                    <documentation>
		                        The external id of the transfer.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="eboTransferId" type="string" minOccurs="0">
		                <annotation>
		                    <documentation>
		                        Optional EBO external id of the transfer.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="transferTypeName" type="string">               
		                <annotation>
		                    <documentation>
		                        Name of the transfer type transfer type.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="realAmount" type="decimal" >
		                <annotation>
		                    <documentation>
		                        The real amount of the transfer, in the players own currency.
		                    </documentation>
		                </annotation>
		            </element>
		            <element name="bonusAmount" type="decimal" >
		                <annotation>
		                    <documentation>
		                        The bonus amount of the transfer, in the players currency.
		                    </documentation>
		                </annotation>
		            </element>
		        </sequence>
		    </complexType>

		    <complexType name="GamingTransactionsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="from" type="tns:date" >
						<annotation>
							<documentation>
								The date to search from. This property must be 
								formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="to" type="tns:date" >
						<annotation>
							<documentation>
								The date to search to. This property must be 
								formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="gameUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the game to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL games in the result.
							</documentation>
						</annotation>
					</element>
					<element name="gamingDomain" type="string" nillable="true" >
						<annotation>
							<documentation>
								The gaming domain to filter the result for. 
								This parameter is optional, set it to null 
								to include ALL gaming domains in the result.
							</documentation>
						</annotation>
					</element>
				    <element name="includeTransfers" type="boolean" minOccurs="0" >
				        <annotation>
				            <documentation>
				                Indicate if money transfers for the gaming transaction should be included in the result.
				            </documentation>
				        </annotation>
				    </element>                    
				</sequence>
			</complexType>

			<complexType name="PaymentTransactions">
				<annotation>
					<documentation>
						A list of payment transactions, where the amounts are 
						in the players own currency.
					</documentation>
				</annotation>
				<sequence>
					<element name="details" type="tns:PaymentTransaction"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="PaymentTransaction">
				<sequence>
					<element name="transactionTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								When the transaction was made. This property is formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
					<element name="transactionId" type="string" >
						<annotation>
							<documentation>
								The external id of the payment transaction.
							</documentation>
						</annotation>
					</element>
					<element name="paymentMethodType" type="int" >
						<annotation>
							<documentation>
								Payment method type 
								1 - Deposit
								2 - Withdrawal
								4 – Failed Withdrawal								
							</documentation>
						</annotation>
					</element>
					<element name="transferType" type="string" >
						<annotation>
							<documentation>
								The type of the transfer, Visa for example.
							</documentation>
						</annotation>
					</element>
					<element name="amount" type="decimal" >
						<annotation>
							<documentation>
								The amount of the payment transaction, in 
								the players own currency.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="PaymentTransactionsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="from" type="tns:date" >
						<annotation>
							<documentation>
								The date to search from. This property must be 
								formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="to" type="tns:date" >
						<annotation>
							<documentation>
								The date to search to. This property must be 
								formatted as a date.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="BonusBalances">
				<annotation>
					<documentation>
						A list of bonus balances per game.
					</documentation>
				</annotation>
				<sequence>
					<element name="details" type="tns:BonusBalance" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="BonusBalance">
				<sequence>
					<element name="gameDomain" type="string" >
						<annotation>
							<documentation>
								The gaming domain this pending is valid for. If it is 
								not set it is valid for any gaming domain.
							</documentation>
						</annotation>
					</element>
					<element name="amount" type="tns:Money" >
						<annotation>
							<documentation>
								The amount of the transaction
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="BonusBalancesRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AvailableCountries">
				<annotation>
					<documentation>
						List of available countries
					</documentation>
				</annotation>
				<sequence>
					<element name="country" type="string" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="AvailableCountriesRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the partner to get 
								available countries for. The UID must match an 
								existing partner UID in the management system.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="PayoutStatistics">
				<sequence>
					<element name="amount" type="decimal" >
						<annotation>
							<documentation>
								The total sum of the players result (win-staked) 
								for requested time period in requested currency 
								for a specific partner or for the operator.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="PayoutStatisticsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								Optional if not set operator is chosen
							</documentation>
						</annotation>
					</element>
					<element name="from" type="tns:date" >
						<annotation>
							<documentation>
								The date to search from. This property must be 
								formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="to" type="tns:date" >
						<annotation>
							<documentation>
								The date to search to. This property must be 
								formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="currency" type="string" >
						<annotation>
							<documentation>
								This is the upper case three character code 
								that represents a currency according to 
								the ISO 4217 standard.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="BiggestWinners">
				<annotation>
					<documentation>
						A list of the biggest winners (max 20).
					</documentation>
				</annotation>
				<sequence>
					<element name="winner" type="tns:Winner" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="BiggestWinnersRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="from" type="tns:date" >
						<annotation>
							<documentation>
								The date to include the biggest winners from. 
								This property must be formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="to" type="tns:date" >
						<annotation>
							<documentation>
								The date to include the biggest winners to. 
								This property must be formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="gameUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the game to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL games in the result.
							</documentation>
						</annotation>
					</element>
					<element name="gamingDomain" type="string" nillable="true" >
						<annotation>
							<documentation>
								The gaming domain to filter the result for. 
								This parameter is optional, set it to null 
								to include ALL gaming domains in the result.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the partner to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL organizations in the result.
							</documentation>
						</annotation>
					</element>
					<element name="currency" type="string" >
						<annotation>
							<documentation>
								This is the upper case three character code 
								that represents a currency according to 
								the ISO 4217 standard.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="RecentWinners">
				<annotation>
					<documentation>
						A list of the recent winners (max 20).
					</documentation>
				</annotation>
				<sequence>
					<element name="winner" type="tns:Winner" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="RecentWinnersRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="gameUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the game to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL games in the result.
							</documentation>
						</annotation>
					</element>
					<element name="gamingDomain" type="string" nillable="true" >
						<annotation>
							<documentation>
								The gaming domain to filter the result for. 
								This parameter is optional, set it to null to 
								include ALL gaming domains in the result.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the partner to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL organizations in the result.
							</documentation>
						</annotation>
					</element>
					<element name="maxWinners" type="int" >
						<annotation>
							<documentation>
								The maximum of winners that will be returned. 
								The maximum amount of winners that will be returned is 20.
							</documentation>
						</annotation>
					</element>
					<element name="currency" type="string" >
						<annotation>
							<documentation>
								This is the upper case three character code 
								that represents a currency according to the ISO 4217 standard.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="JackpotWinnersRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up in 
								the management system.
							</documentation>
						</annotation>
					</element>
					<element name="from" type="tns:date" >
						<annotation>
							<documentation>
								The date to include the jackpot winners from. 
								This property must be formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="to" type="tns:date" >
						<annotation>
							<documentation>
								The date to include the jackpot winners to. 
								This property must be formatted as a date.
							</documentation>
						</annotation>
					</element>
					<element name="gameUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the game to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL games in the result.
							</documentation>
						</annotation>
					</element>
					<element name="gamingDomain" type="string" nillable="true" >
						<annotation>
							<documentation>
								The gaming domain to filter the result for. 
								This parameter is optional, set it to null to 
								include ALL gaming domains in the result.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" nillable="true" >
						<annotation>
							<documentation>
								The unique identifier of the partner to filter 
								the result for. This parameter is optional, 
								set it to null to include ALL organizations 
								in the result.
							</documentation>
						</annotation>
					</element>
					<element name="currency" type="string" >
						<annotation>
							<documentation>
								This is the upper case three character code 
								that represents a currency according to 
								the ISO 4217 standard.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="JackpotWinners">
				<annotation>
					<documentation>
						A list of the jackpot winners (max 20).
					</documentation>
				</annotation>
				<sequence>
					<element name="winner" type="tns:Winner" minOccurs="0"
						maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="Winner">
				<sequence>
					<element name="nickname" type="string" />
					<element name="gameName" type="string" />
					<element name="amount" type="decimal" >
						<annotation>
							<documentation>
								The amount of the player result (win-staked)
							</documentation>
						</annotation>
					</element>
					<element name="winTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								When the win occured. 
								This property is formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="VerifyAdminUserAuthTokenRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="token" type="string" >
						<annotation>
							<documentation>
								The authentication token to verify.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="AdminUserInfo">
				<sequence>
					<element name="userID" type="long" >
						<annotation>
							<documentation>
								The id of the GMS client user.
							</documentation>
						</annotation>
					</element>
					<element name="username" type="string" >
						<annotation>
							<documentation>
								The username of the GMS client user.
							</documentation>
						</annotation>
					</element>
					<element name="partnerUID" type="string" >
						<annotation>
							<documentation>
								The uid of the partner that the GMS client belongs to.
							</documentation>
						</annotation>
					</element>
					<element name="permissions" type="string" minOccurs="0"
						maxOccurs="unbounded" >
						<annotation>
							<documentation>
								The permissions that the GMS client user has.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="GetCurrentPlayersRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="orgUnitUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the organization. 
								If this is the UID of the operator then info for 
								all game clients that have ongoing gaming activities 
								are returned. Otherwise, if it is an UID of a 
								partner then only info for game clients belonging 
								to that partner is returned.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="CurrentPlayersOnGameClients">
				<annotation>
					<documentation>
						A list of how many players there currently are on the game clients.
					</documentation>
				</annotation>
				<sequence>
					<element name="currentPlayers" type="tns:CurrentPlayersOnGameClient"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
			</complexType>

			<complexType name="CurrentPlayersOnGameClient">
				<sequence>
					<element name="gameClientName" type="string" >
						<annotation>
							<documentation>
								The name of the game client.
							</documentation>
						</annotation>
					</element>
					<element name="noOfCurrentPlayers" type="long" >
						<annotation>
							<documentation>
								The number of currently logged on players.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<complexType name="ValidatePlayerSessionRequest">
				<sequence>
					<element name="playerSessionUID" type="string" />
					<element name="gameSystemUID" type="string" />
					<element name="gameClientUID" type="string" />
				</sequence>
			</complexType>

			<complexType name="PlayerSession">
				<sequence>
					<element name="sessionID" type="string" />
				</sequence>
			</complexType>

			<complexType name="RegisterPromotionCodeRequest">
				<sequence>
					<element name="systemUID" type="string" />
					<element name="playerSessionUID" type="string" />
					<element name="promotionCode" type="string" />
				</sequence>
			</complexType>

			<complexType name='SetSessionLimitRequest'>
				<sequence>
					<element name="sessionUID" type="tns:uid" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
					<element name="sessionLimit" type="int" minOccurs="0" >
						<annotation>
							<documentation>
								The requested session limit in minutes for the player. 
								Interpreted as disabled if omitted.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<element name='SetSessionLimitRequest' type='tns:SetSessionLimitRequest' >
				<annotation>
					<documentation>
						Set the responsible gaming session time limit for the player.
					</documentation>
				</annotation>
			</element>

			<complexType name='SetSessionLimitResponse'>
				<annotation>
					<documentation>
						The current session limit settings for the player after 
						the set, including possible pending limit and 
						pending activation time.
					</documentation>
				</annotation>
				<sequence>
					<element name="enabled" type="boolean">
						<annotation>
							<documentation>
								Whether or not the limit is enabled after the set.
							</documentation>
						</annotation>
					</element>
					<element name="limit" type="int">
						<annotation>
							<documentation>
								The current session limit for the player, after the set
							</documentation>
						</annotation>
					</element>
					<element name="pendingLimit" type="int" minOccurs="0">
						<annotation>
							<documentation>
								Pending session limit, null if no pending  limit 
								is set or when the session limit will be disabled 
								at the pendingLimitActivationTime.
							</documentation>
						</annotation>
					</element>
					<element name="pendingLimitActivationTime" type="tns:dateTime" minOccurs="0">
						<annotation>
							<documentation>
								Pending session limit activation time, null if 
								no pending  limit exist. This property is formatted as a dateTime.
							</documentation>
						</annotation>
					</element>
		        </sequence>
			</complexType>

			<element name='SetSessionLimitResponse' type='tns:SetSessionLimitResponse' />
			
			<complexType name='SetWagerLimitsRequest'>
				<sequence>
					<element name="sessionUID" type="tns:uid" />
					<element name="wagerLimit" type="tns:FinancialLimit" minOccurs="1" maxOccurs="unbounded"/>
				</sequence>
			</complexType>

			<element name='SetWagerLimitsRequest' type='tns:SetWagerLimitsRequest' />

			<complexType name='SetWagerLimitsResponse'>
			    <annotation>
			        <documentation>
			            Response contains all wagering limits, not only those set in the request.
			        </documentation>
			    </annotation>
				<sequence>
				    <element name="wagerLimit" type="tns:FinancialLimit" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
			</complexType>
			
			<element name='SetWagerLimitsResponse' type='tns:SetWagerLimitsResponse' />
			
			<complexType name='SetLossLimitsRequest'>
				<sequence>
					<element name="sessionUID" type="tns:uid" />
				    <element name="lossLimit" type="tns:FinancialLimit" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
			</complexType>

			<element name='SetLossLimitsRequest' type='tns:SetLossLimitsRequest' />

			<complexType name='SetLossLimitsResponse'>
			    <annotation>
			        <documentation>
			            Response contains all loss limits, not only those set in the request.
			        </documentation>
			    </annotation>
			    <sequence>
				    <element name="lossLimit" type="tns:FinancialLimit" minOccurs="1" maxOccurs="unbounded"/>
				</sequence>
			</complexType>

			<element name='SetLossLimitsResponse' type='tns:SetLossLimitsResponse' />

		    <complexType name='SetRealityCheckEnabledRequest'>
				<sequence>
					<element name="systemUID" type="tns:uid" />
					<element name="sessionUID" type="tns:uid" />
				    <element name="realityCheckEnabled" type="boolean" />
				</sequence>
			</complexType>

			<element name='SetRealityCheckEnabledRequest' type='tns:SetRealityCheckEnabledRequest' >
				<annotation>
					<documentation>
						Enable / disable reality check for the player.
					</documentation>
				</annotation>
			</element>

			<complexType name='WillBecomePermanentRequest'>
				<sequence>
					<element name="sessionUID" type="tns:uid" />
					<element name="startTime" type="tns:dateTime" minOccurs="0" />
					<element name="endTime" type="tns:dateTime" minOccurs="0" />
				</sequence>
			</complexType>

			<element name='WillBecomePermanentRequest' type='tns:WillBecomePermanentRequest' />

			<complexType name='WillBecomePermanentResponse'>
				<sequence>
					<element name="willBecomePermanent" type="boolean" />
				</sequence>
			</complexType>

			<element name='WillBecomePermanentResponse' type='tns:WillBecomePermanentResponse' />

			<complexType name='SelfExcludeRequest'>
				<sequence>
					<element name="sessionUID" type="tns:uid" />
					<element name="startTime" type="tns:dateTime" minOccurs="0" />
					<element name="endTime" type="tns:dateTime" minOccurs="0" />
				</sequence>
			</complexType>

			<element name='SelfExcludeRequest' type='tns:SelfExcludeRequest' />

			<complexType name='SelfExcludeResponse'>
				<sequence>
					<element name="startTime" type="tns:dateTime" />
					<element name="endTime" type="tns:dateTime" minOccurs="0" />
				</sequence>
			</complexType>

			<element name='SelfExcludeResponse' type='tns:SelfExcludeResponse' />

		    <simpleType name="LimitPeriod">
		        <restriction base="string">
		            <enumeration value="Daily"/>
		            <enumeration value="Weekly"/>
		            <enumeration value="Monthly"/>
		        </restriction>
		    </simpleType>
		    
		    <complexType name="FinancialLimit">
		        <sequence>
		        	<element name="enabled" type="boolean">
		        		<annotation>
		        			<documentation>
		        				Flag for enabled/disabled limit
		        			</documentation>
		        		</annotation>
		        	</element>
		        	<element name="period" type="tns:LimitPeriod">
		        		<annotation>
		        			<documentation>
		        				The limit period.
		        			</documentation>
		        		</annotation>
		        	</element>
		        	<element name="limit" type="decimal" minOccurs="0">
		        		<annotation>
		        			<documentation>
		        				The financial limit amount.
		        			</documentation>
		        		</annotation>
		        	</element>
		        	<element name="currentValue" type="decimal" minOccurs="0">
		        		<annotation>
		        			<documentation>
		        				The current value of the corresponding counter 
		        				(e.g. the total wager of the day).
		        				<i>This value is ignored by setWagerLimits.</i>		        				
		        			</documentation>
		        		</annotation>
		        	</element>
		        	<element name="pendingLimit" type="decimal" minOccurs="0">
		        		<annotation>
		        			<documentation>
		        				Limit pending cool-off period, if any.
		        				<i>This value is ignored by setWagerLimits.</i>		        				
		        			</documentation>
		        		</annotation>
		        	</element>
		        	<element name="pendingActivationTime" type="tns:dateTime" minOccurs="0">
		        		<annotation>
		        			<documentation>
		        				Timestamp of when pending limit will become active.
		        				<i>This value is ignored by setWagerLimits.</i>		        				
		        			</documentation>
		        		</annotation>
		        	</element>
		        </sequence>
		    </complexType>	 
		    
		    <complexType name="ResponsibleGamingSettings">
		        <sequence>
		            <element name="selfExclusion">
		                <complexType>
		                    <sequence>
		                    	<element name="partnerEnabled" type="boolean">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if self exclusion is enabled for the partner.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    </sequence>
		                </complexType>
		            </element>
		            <element name="realityCheck">
		                <complexType>
		                    <sequence>
		                    	<element name="partnerEnabled" type="boolean">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if reality check is enabled for the partner.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="playerEnabled" type="boolean" minOccurs="0">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if reality check is enabled for the player.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="interval" type="int" minOccurs="0">
		                    		<annotation>
		                    			<documentation>
		                    				Reality check interval.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    </sequence>
		                </complexType>		                
		            </element>
		            <element name="sessionLimit">
		                <complexType>
		                    <sequence>
		                    	<element name="partnerEnabled" type="boolean">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if session limit 
		                    				is enabled for the partner.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="playerEnabled" type="boolean" minOccurs="0">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if session limit 
		                    				is enabled for the player.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="limit" type="int" minOccurs="0">
		                    		<annotation>
		                    			<documentation>
		                    				Session limit.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="pendingLimit" type="int" minOccurs="0">
		                    		<annotation>
		                    			<documentation>
		                    				Pending session limit, null if no 
		                    				pending limit is set.or when the session 
		                    				limit will be disabled at the 
		                    				pendingLimitActivationTime.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="pendingLimitActivationTime" type="tns:dateTime" minOccurs="0">
		                    		<annotation>
		                    			<documentation>
		                    				Pending session limit activation time, 
		                    				null if no pending  limit exist. 
		                    				This property is formatted as a dateTime.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    </sequence>
		                </complexType>		                
		            </element>
		            <element name="wagerLimits">
		                <complexType>
		                    <sequence>
		                    	<element name="partnerEnabled" type="boolean">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if wager limits are 
		                    				enabled for the partner.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="limits" type="tns:FinancialLimit" minOccurs="0" maxOccurs="unbounded">
		                    		<annotation>
		                    			<documentation>
		                    				The wager limits.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    </sequence>
		                </complexType>		                
		            </element>
		            <element name="lossLimits">
		                <complexType>
		                    <sequence>
		                    	<element name="partnerEnabled" type="boolean">
		                    		<annotation>
		                    			<documentation>
		                    				Flag to indicate if loss limits are enabled for the partner.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    	<element name="limits" type="tns:FinancialLimit" minOccurs="0" maxOccurs="unbounded">
		                    		<annotation>
		                    			<documentation>
		                    				The loss limits.
		                    			</documentation>
		                    		</annotation>
		                    	</element>
		                    </sequence>
		                </complexType>		                
		            </element>
		        </sequence>
		    </complexType>
		    
		    <complexType name="GetResponsibleGamingSettingsRequest">
		        <sequence>
					<element name="systemUID" type="tns:uid" />
		            <element name="sessionUID" type="tns:uid" />
		        </sequence>		        
		    </complexType>
			<element name="GetResponsibleGamingSettingsRequest" type="tns:GetResponsibleGamingSettingsRequest">
				<annotation>
					<documentation>
						Returns all responsible gaming settings for the player.
					</documentation>
				</annotation>
			</element>
		    
		    <element name="GetResponsibleGamingSettingsResponse" type="tns:ResponsibleGamingSettings"/>
		    
		  	<complexType name="GetRewardDetailsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. 
								The UID must match a system that is set-up 
								in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionUID" type="string" />
				</sequence>
		  	</complexType>

			<element name='GetRewardDetailsRequest' type='tns:GetRewardDetailsRequest' >
				<annotation>
					<documentation>
						Returns a list of BonusMoneyBag(s) and PendingBonusMoneyBag(s) 
						irrespective of the bag status for given player Id.
					</documentation>
				</annotation>
			</element>

	  	    <complexType name="RewardDetails">
				<sequence>
					<element name="bonusMoneyBag" type="tns:BonusMoneyBag"
						minOccurs="0" maxOccurs="unbounded" >
						<annotation>
    						<documentation>
    							A list of bonus money bag's.
    							This info is also available in the GMS client in Reward Details.
    						</documentation>
      					</annotation>
					</element>
				    <element name="pendingBonusMoneyBag" type="tns:PendingBonusMoneyBag"
						minOccurs="0" maxOccurs="unbounded" >
						<annotation>
    						<documentation>
    							A list pending money bag's.
    							This info is also available in the GMS client in Reward Details.
    						</documentation>
      					</annotation>
      				</element>
				</sequence>
		  	</complexType>

		  	<element name='RewardDetails' type='tns:RewardDetails' />

		    <complexType name="BonusMoneyBag">
		    	<annotation>
    				<documentation>
    					A bonus money bag contains money that a player can use to wager with.
    					The bonus bag will convert to real money when the player has fulfilled a certain wagering requirement.
    					The real money is then transferred to the player’s account.
    				</documentation>
      			</annotation>
				<sequence>
				    <element name="bonusMoneyBagId" type="long" />
				    <element name="bonusId" type="long" nillable="true" />
				    <element name="pendingBonusMoneyBagId" type="long" nillable="true" />
					<element name="createdTime" type="tns:dateTime" />
					<element name="gamingDomain" type="string" />
					<element name="receivedBonusAmount" type="tns:Money" />
					<element name="bonusBagAmount" type="tns:Money" />
			    	<element name="remainingWageringRequirement" type="tns:Money" />
					<element name="initialWageringRequirement" type="tns:Money" />
					<element name="expiryDate" type="string" />
					<element name="includedGamingDomains" type="string" />
					<element name="excludedGames" type="string" nillable="true" />
					<element name="convertedBonusAmount" type="tns:Money" />
					<element name="state" type="string" />
					<element name="gamesExcludedFromBonusBag" type="string" nillable="true" />
				</sequence>
		  	</complexType>

		    <complexType name="PendingBonusMoneyBag">
				<sequence>
					<annotation>
    					<documentation>
							A pending bonus money bag contains bonus money that the player will receive when a qualifying requirement is met.
							Until this requirement is met, the player cannot wager with the bonus money.
							When the qualifying requirement is met, the pending bonus money bag will be converted to bonus money which can be used in wagers.
    					</documentation>
      				</annotation>
				    <element name="pendingBonusMoneyBagId" type="long" />
				    <element name="bonusId" type="long" nillable="true" />
				    <element name="bonusMoneyBagId" type="long" nillable="true" />
					<element name="createdTime" type="tns:dateTime" />
					<element name="pendingBonusAmount" type="tns:Money" />
			    	<element name="remainingQualifyRequirement" type="tns:Money" />
					<element name="initialQualifyRequirement" type="tns:Money" />
					<element name="expiryDate" type="string" />
					<element name="includedGamingDomains" type="string" />
					<element name="excludedGames" type="string" nillable="true" />
					<element name="state" type="string" />
					<element name="gamesExcludedFromBonusBag" type="string" nillable="true" />
				</sequence>
		  	</complexType>

		  	<complexType name="GetSelfExclusionsRequest">
				<sequence>
					<element name="systemUID" type="string" >
						<annotation>
							<documentation>
								The unique identifier of the calling system. The UID must match a system that is set-up in the management system.
							</documentation>
						</annotation>
					</element>
					<element name="sessionID" type="string" >
						<annotation>
							<documentation>
								The ID that identifies a player’s ongoing session.
							</documentation>
						</annotation>
					</element>
				</sequence>
		  	</complexType>

			<element name='GetSelfExclusionsRequest' type='tns:GetSelfExclusionsRequest' >
				<annotation>
					<documentation>
						Returns a list of self exclusions for the player.
					</documentation>
				</annotation>
			</element>

	  	    <complexType name="SelfExclusions">
				<sequence>
					<element name="selfExclusion" type="tns:SelfExclusion"
						minOccurs="0" maxOccurs="unbounded" />
				</sequence>
		  	</complexType>

		  	<element name='SelfExclusions' type='tns:SelfExclusions' />

		    <complexType name="SelfExclusion">
				<sequence>
					<element name="status" type="string" >
						<annotation>
							<documentation>
								The status of self exclusion (Expired, Active, Future).
							</documentation>
						</annotation>
					</element>
					<element name="createdTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								The created time of the self exclusion.
							</documentation>
						</annotation>
					</element>
					<element name="startTime" type="tns:dateTime" >
						<annotation>
							<documentation>
								The start time of the self exclusion.
							</documentation>
						</annotation>
					</element>
					<element name="endTime" type="tns:dateTime" minOccurs="0" >
						<annotation>
							<documentation>
								The end time of the self exclusion.
							</documentation>
						</annotation>
					</element>
					<element name="createdBy" type="string" minOccurs="0" >
						<annotation>
							<documentation>
								The user name of the creator.
							</documentation>
						</annotation>
					</element>
					<element name="deletedTime" type="tns:dateTime" minOccurs="0" >
						<annotation>
							<documentation>
								The deleted time of the self exclusion.
							</documentation>
						</annotation>
					</element>
					<element name="deletedBy" type="string" minOccurs="0" >
						<annotation>
							<documentation>
								The user name of the deleter.
							</documentation>
						</annotation>
					</element>
				</sequence>
		  	</complexType>

			<!--
      Operation Elements
    -->

			<element name="Register">
				<annotation>
					<documentation>
						This method will register a player in GMS. 
						It is expected that the portal will hold all the 
						validation rules and that GMS will only validate to 
						prevent inconsistent or incorrect data to be stored 
						in the system. When the player registers he/she will be 
						set to an initial registration level. A registration 
						level has a specified number of properties and validation 
						rules bound to it.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:InitialRegistrationRequest" />
					</sequence>
				</complexType>
			</element>
			
			<element name="GetPlayerRegistrationLevels">
				<annotation>
					<documentation>
						Returns the Player Registration Levels available in GMS.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:PlayerRegistrationLevelRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="PlayerRegistrationLevelsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PlayerRegistrationLevelResult" />
					</sequence>
				</complexType>
			</element>
			
			<element name="Login">
				<annotation>
					<documentation>
						Creates a session for a player and allows him to have access 
						to session restricted services.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:LoginRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="LoginResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:LoginResult" />
					</sequence>
				</complexType>
			</element>

			<element name="LoginWithToken">
				<annotation>
					<documentation>
						Creates a session for a player and allows him to have 
						access to session restricted services.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:LoginWithTokenRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="Logout">
				<annotation>
					<documentation>
						Terminates a player session.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:LogoutRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAccountBalance">
				<annotation>
					<documentation>
						Returns the balance of the players real money and 
						bonus account balances.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:AccountBalanceRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAccountBalanceResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:AccountBalance" />
					</sequence>
				</complexType>
			</element>

			<element name="GetNickName">
				<annotation>
					<documentation>
						Returns the game specific nickname associated with 
						the player based on game system UID, if this doesn’t exist 
						then returns the player’s preferred nickname and sets 
						this to be the player’s game system specific nickname, 
						when both are null returns blank.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:GetNickNameRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetNickNameResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:NickName" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAllNickNames">
				<annotation>
					<documentation>
						Returns player’s preferred nickname (if exist) and 
						list of game system specific nicknames associated with 
						the player. Each GameSystemNickName object contains 
						1) Game System UID, 
						2) Game System Name and 
						3) Player’s Game System specific nickname.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:GetAllNickNamesRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAllNickNamesResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:AllNickNames" />
					</sequence>
				</complexType>
			</element>

			<element name="SetNickName">
				<annotation>
					<documentation>
						Set the game system specific nickname for the player 
						based on provided game system UID. It also sets preferred 
						nickname by performing a check, if the player doesn’t have 
						preferred nickname then the game specific nickname will 
						be set as preferred nickname provided no other player has 
						the same preferred nickname when the player’s preferred 
						nickname uniqueness level is set to whole system or 
						per partner.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:SetNickNameRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="IsUsernameAvailable">
				<annotation>
					<documentation>
						Check if the given username is available.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:UsernameAvailableRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="IsUsernameAvailableResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:UsernameAvailable" />
					</sequence>
				</complexType>
			</element>

			<element name="RedeemLoyaltyPoints">
				<annotation>
					<documentation>
						Redeems a players loyalty points.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:RedeemLoyaltyPointsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="DeductLoyaltyPoints">
				<annotation>
					<documentation>
						Deducts loyalty points from a players loyalty points account.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:DeductLoyaltyPointsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="UpdatePassword">
				<annotation>
					<documentation>
						Updates a player’s password to a new one if the 
						old password matches the new one.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:UpdatePasswordRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="RenewPassword">
				<annotation>
					<documentation>
						Sends a new password to the player's registered email 
						if the username matches an existing player.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:RenewPasswordRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="ReferAFriend">
				<annotation>
					<documentation>
						Refers a friend to a player.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:ReferAFriendRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="ActivateAccount">
				<annotation>
					<documentation>
						Activates an existing inactive account.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:ActivationRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="VerifyEmail">
				<annotation>
					<documentation>
						Verifies a player’s registered email address.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:EmailVerificationRequest" />
					</sequence>
				</complexType>
			</element>

		    <element name="VerifySMS">
		        <annotation>
		            <documentation>
		                Verifies a player’s SMS.
		            </documentation>
		        </annotation>
		        <complexType>
		            <sequence>
		                <element name="request" type="tns:SMSVerificationRequest" />
		            </sequence>
		        </complexType>
		    </element>

		    <element name="UpdatePlayerDetails">
				<annotation>
					<documentation>
						Updates the details about a player. The following details 
						can not be updated with this method: 
						Username, TrackingCampaign, Password, Currency.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:UpdatePlayerDetailsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPlayerDetails">
				<annotation>
					<documentation>
						Returns the details about a player.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:PlayerDetailsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPlayerDetailsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PlayerDetails" />
					</sequence>
				</complexType>
			</element>

			<element name="VerifyAuthenticationToken">
				<annotation>
					<documentation>
						Verify an authentication token for a player. 
						This token can then be used to verify that the player is valid.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:VerifyAuthenticationTokenRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="VerifyAuthenticationTokenResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PlayerDetails" />
					</sequence>
				</complexType>
			</element>

			<element name="GetGameAccountBalance">
				<annotation>
					<documentation>
						This method gets the available balance that can be used for transfer to the specified game.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:GameAccountBalanceRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetGameAccountBalanceResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:GameAccountBalance" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAuthenticationToken">
				<annotation>
					<documentation>
						Creates an authentication token for a player. 
						This token is used by an external system to login to GMS. 
						This token has a limited validity time that is 
						determined by the GMS server.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:AuthenticationTokenRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAuthenticationTokenResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:AuthenticationToken" />
					</sequence>
				</complexType>
			</element>

			<element name="GetBonusRewardDetails">
				<annotation>
					<documentation>
						Returns an array with bonus reward details.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:BonusRewardDetailsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetBonusRewardDetailsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:BonusRewardDetails" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPendingPayoutDetails">
				<annotation>
					<documentation>
						Returns an array with pending payout details.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:PendingPayoutDetailsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPendingPayoutDetailsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PendingPayoutDetails" />
					</sequence>
				</complexType>
			</element>

			<element name="GetReferAFriendStatus">
				<annotation>
					<documentation>
						Returns the list of a players referred friends and their status.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:GetReferAFriendStatusRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetReferAFriendStatusResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:ReferAFriendDetails" />
					</sequence>
				</complexType>
			</element>

			<element name="GetRewardTransactions">
				<annotation>
					<documentation>
						Returns a list of reward transactions during a time period.
						Following transactions types will be returned.
						-Bonus Expiration
						-Bonus Payout
						-Bonus To Real Conversion
						-Loyalty Points Conversion
						-Loyalty Points Manual Conversion
						-Manual Bonus Payout
						-Manual Pending Bonus Payout
						-Pending Bonus Expiration
						-Pending Bonus Payout
						-Pending Bonus To Bonus Conversion
						-Pending Bonus Removal
						-Bonus Removal						
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:RewardTransactionsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetRewardTransactionsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:RewardTransactions" />
					</sequence>
				</complexType>
			</element>

			<element name="GetGamingTransactions">
				<annotation>
					<documentation>
						Returns a list of gaming transactions (the finished games) 
						for the requested player during a time period. 
						The amounts returned are in the players own currency.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:GamingTransactionsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetGamingTransactionsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:GamingTransactions" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPaymentTransactions">
				<annotation>
					<documentation>
						Returns a list of payment transactions for the requested 
						player during a time period. The amounts returned are 
						in the players own currency.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:PaymentTransactionsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPaymentTransactionsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PaymentTransactions" />
					</sequence>
				</complexType>
			</element>

			<element name="GetBonusBalance">
				<annotation>
					<documentation>
						Returns an array of ongoing bonus balances per game.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:BonusBalancesRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetBonusBalanceResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:BonusBalances" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAvailableCountries">
				<annotation>
					<documentation>
						Returns a list of all countries for a system or 
						for system and partnerUID
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:AvailableCountriesRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetAvailableCountriesResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:AvailableCountries" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPayoutStatistics">
				<annotation>
					<documentation>
						The total sum of the players result (win-staked) for 
						requested time period in requested currency for 
						a specific partner or for the operator. Result is cached 
						and cache time could be configured, a minimum cache time 
						is the time it takes to aggregate the data.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:PayoutStatisticsRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetPayoutStatisticsResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PayoutStatistics" />
					</sequence>
				</complexType>
			</element>

			<element name="GetBiggestWinners">
				<annotation>
					<documentation>
						Returns a maximum of 20 players with biggest result (win-stake) 
						during the requested time period. Result is cached and 
						cache time could be configured, a minimum cache time 
						is the time it takes to aggregate the data.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:BiggestWinnersRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetBiggestWinnersResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:BiggestWinners" />
					</sequence>
				</complexType>
			</element>

			<element name="GetRecentWinners">
				<annotation>
					<documentation>
						Returns a list off recent players with positive 
						player result (win-stake), this might be empty if 
						the system is restarted or no one has won. Result is cached 
						and cache time could be configured, a minimum cache time 
						is the time it takes to aggregate the data.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:RecentWinnersRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetRecentWinnersResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:RecentWinners" />
					</sequence>
				</complexType>
			</element>

			<element name="GetJackpotWinners">
				<annotation>
					<documentation>
						Returns a maximum of 20 jackpot winners during the 
						requested time period. Result is cached and cache time 
						could be configured, a minimum cache time is the time 
						it takes to aggregate the data.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:JackpotWinnersRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetJackpotWinnersResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:JackpotWinners" />
					</sequence>
				</complexType>
			</element>

			<element name="VerifyAdminUserAuthToken">
				<annotation>
					<documentation>
						This method verifies an authentication token to 
						find out the current GMS client user and the permissions of that user.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:VerifyAdminUserAuthTokenRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="VerifyAdminUserAuthTokenResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:AdminUserInfo" />
					</sequence>
				</complexType>
			</element>

			<element name="GetCurrentPlayers">
				<annotation>
					<documentation>
						This method returns counters of how many unique players 
						that currently are logged on to the different game clients. 
						Result is cached and cache time could be configured.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:GetCurrentPlayersRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="GetCurrentPlayersResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:CurrentPlayersOnGameClients" />
					</sequence>
				</complexType>
			</element>

			<element name="ValidatePlayerSession">
				<annotation>
					<documentation>
						This method validates a player session, either internally 
						or externally depending on the partner associated with 
						the game client. If the partner is internal, the 
						validation checks that the player session is currently active 
						in GMS and that the player is not locked. If the partner 
						is external, the player session and player details will 
						be transferred from the EBO configured for the partner
						into GMS if the player session is valid in the EBO.
					</documentation>
				</annotation>
				<complexType>
					<sequence>
						<element name="request" type="tns:ValidatePlayerSessionRequest" />
					</sequence>
				</complexType>
			</element>

			<element name="ValidatePlayerSessionResponse">
				<complexType>
					<sequence>
						<element name="Result" type="tns:PlayerSession" />
					</sequence>
				</complexType>
			</element>

			<element name="RegisterPromotionCode">
				<complexType>
					<sequence>
						<element name="request" type="tns:RegisterPromotionCodeRequest" />
					</sequence>
				</complexType>
			</element>

			<!-- Error codes, defined as fault elements -->

			<complexType name="InternalFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InternalFault" type="tns:InternalFault" >
				<annotation>
					<documentation>
						An internal exception occurred in GMS. Ex: Failure to 
						reach the database.
					</documentation>
				</annotation>
			</element>

			<complexType name="InvalidArgumentFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InvalidArgumentFault" type="tns:InvalidArgumentFault" >
				<annotation>
					<documentation>
						The given argument was null or did not match the format specified.
					</documentation>
				</annotation>
			</element>

			<complexType name="EntityNotFoundFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="EntityNotFoundFault" type="tns:EntityNotFoundFault" >
				<annotation>
					<documentation>
						If the systemUID refers to a non-existent entity
					</documentation>
				</annotation>
			</element>

			<complexType name="InvalidSessionFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InvalidSessionFault" type="tns:InvalidSessionFault" >
				<annotation>
					<documentation>
						If the session referred by the session ID 
						is non existent or already closed.
					</documentation>
				</annotation>
			</element>

			<complexType name="AccessDeniedFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="AccessDeniedFault" type="tns:AccessDeniedFault" >
				<annotation>
					<documentation>
						The player was not found or the password is incorrect.
						Or the authentication token was not found or has expired.
					</documentation>
				</annotation>
			</element>

			<complexType name="PlayerLockedFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="PlayerLockedFault" type="tns:PlayerLockedFault" >
				<annotation>
					<documentation>
						If the player associated with the player session is locked.
					</documentation>
				</annotation>
			</element>

			<complexType name="LoginForbiddenFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="LoginForbiddenFault" type="tns:LoginForbiddenFault" >
				<annotation>
					<documentation>
						The player may not log in because of various reasons. 
						Ex: The system only allows test players.
					</documentation>
				</annotation>
			</element>

			<complexType name="RegistrationDeniedFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RegistrationDeniedFault" type="tns:RegistrationDeniedFault" >
				<annotation>
					<documentation>
						This is indicates that the player was denied registration. 
						Ex: The player comes from a blacklisted country 
						or the password is equal to the username.
					</documentation>
				</annotation>
			</element>

			<complexType name="InvalidPropertyFault">
				<sequence>
					<element name="message" type="string" >
						<annotation>
							<documentation>
								The message. This is purely for logging purposes.
							</documentation>
						</annotation>
					</element>
					<element name="errorCollection" type="tns:PlayerPropertyErrorCollection" >
						<annotation>
							<documentation>
								A key value array where the key represents the property 
								that was incorrect and the value represents 
								"Uniquness" or "Invalid". "Uniquness" indicates 
								that the property already occurred in the management 
								system and that there was a rule that limited the 
								number of occurrences. "Invalid" indicates that 
								the format is incorrect. Both the key and the value 
								are strings in this error array.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>
			<element name="InvalidPropertyFault" type="tns:InvalidPropertyFault" >
				<annotation>
					<documentation>
						This type is an exception type that is thrown if a given 
						player property breaks a validation rule such as uniqueness or format.
					</documentation>
				</annotation>
			</element>

			<complexType name="WrongPasswordFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="WrongPasswordFault" type="tns:WrongPasswordFault" >
				<annotation>
					<documentation>
						If the old password does not match the stored password.
					</documentation>
				</annotation>
			</element>

			<complexType name="PasswordFormatFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="PasswordFormatFault" type="tns:PasswordFormatFault" >
				<annotation>
					<documentation>
						If the format of the new password is invalid unchanged 
						or equal to the username.
					</documentation>
				</annotation>
			</element>

			<complexType name="PlayerNotFoundFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="PlayerNotFoundFault" type="tns:PlayerNotFoundFault" >
				<annotation>
					<documentation>
						The target player was not found.
					</documentation>
				</annotation>
			</element>

			<complexType name="PlayerPendingActivationFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="PlayerPendingActivationFault" type="tns:PlayerPendingActivationFault" >
				<annotation>
					<documentation>
						If the player is not activated yet.
					</documentation>
				</annotation>
			</element>

			<complexType name="RAFPropertyFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RAFPropertyFault" type="tns:RAFPropertyFault" >
				<annotation>
					<documentation>
						If the format of the friends name or email is incorrect.
					</documentation>
				</annotation>
			</element>

			<complexType name="RAFInvalidEmailFormatFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RAFInvalidEmailFormatFault" type="tns:RAFInvalidEmailFormatFault" >
				<annotation>
					<documentation>
						If the format of the friends email is incorrect.
					</documentation>
				</annotation>
			</element>

			<complexType name="RAFAllreadyReferedFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RAFAllreadyReferedFault" type="tns:RAFAllreadyReferedFault" >
				<annotation>
					<documentation>
						If the friend is already refered.
					</documentation>
				</annotation>
			</element>

			<complexType name="RAFExsistingPlayerFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RAFExsistingPlayerFault" type="tns:RAFExsistingPlayerFault" >
				<annotation>
					<documentation>
						If the friend is an existing player.
					</documentation>
				</annotation>
			</element>

			<complexType name="RAFMaxReferalsFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RAFMaxReferalsFault" type="tns:RAFMaxReferalsFault" >
				<annotation>
					<documentation>
						If the maximum number of referals for this player is reached.
					</documentation>
				</annotation>
			</element>

			<complexType name="RAFNoProgramFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="RAFNoProgramFault" type="tns:RAFNoProgramFault" >
				<annotation>
					<documentation>
						If there is no refer-a-friend program configured 
						in the management system.
					</documentation>
				</annotation>
			</element>

			<complexType name="ToLowLoyaltyPointsBalanceFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="ToLowLoyaltyPointsBalanceFault" type="tns:ToLowLoyaltyPointsBalanceFault" >
				<annotation>
					<documentation>
						The number of points to convert exceeds the number 
						of points on the players account.
					</documentation>
				</annotation>
			</element>

			<complexType name="LowerLoyaltyPointsLimitNotReachedFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="LowerLoyaltyPointsLimitNotReachedFault" type="tns:LowerLoyaltyPointsLimitNotReachedFault" >
				<annotation>
					<documentation>
						There is a lower limit that the player has to reach 
						to be able to convert loyalty points. 
						If this level is not reached then this exception is thrown.
					</documentation>
				</annotation>
			</element>

			<complexType name="InvalidTokenFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InvalidTokenFault" type="tns:InvalidTokenFault" >
				<annotation>
					<documentation>
						The token is expired or not found.
					</documentation>
				</annotation>
			</element>

			<complexType name="InsufficientFundsFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InsufficientFundsFault" type="tns:InsufficientFundsFault" />

			<complexType name="InvalidPlayerFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InvalidPlayerFault" type="tns:InvalidPlayerFault" >
				<annotation>
					<documentation>
						If the player session is invalid.
					</documentation>
				</annotation>
			</element>

			<complexType name="InvalidCurrencyFault">
				<sequence>
					<element name="message" type="string" />
				</sequence>
			</complexType>
			<element name="InvalidCurrencyFault" type="tns:InvalidCurrencyFault" >
				<annotation>
					<documentation>
						If the currency refers to a non-existent entity
					</documentation>
				</annotation>
			</element>

			<complexType name="GMSFault">
				<annotation>
					<documentation>Base type for all faults.</documentation>
				</annotation>
				<sequence>
					<element name="message" type="string">
						<annotation>
							<documentation>Text message.</documentation>
						</annotation>
					</element>
					<element name="code" type="string">
						<annotation>
							<documentation>Error code of underlying cause.
							</documentation>
						</annotation>
					</element>
					<element name="identifier" type="string">
						<annotation>
							<documentation>GMS identifier of error instance.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</complexType>

			<element name="ParameterFault" type="tns:GMSFault">
				<annotation>
					<documentation>Invalid input from calling system.
					</documentation>
				</annotation>
			</element>

			<element name="GeneralFault" type="tns:GMSFault">
				<annotation>
					<documentation>General/Unknown error.
					</documentation>
				</annotation>
			</element>

			<element name="UnknownEntityFault" type="tns:GMSFault">
				<annotation>
					<documentation>An entity identified with a UID is not known by
						GMS.
        </documentation>
				</annotation>
			</element>

			<element name="DuplicateEntityFault" type="tns:GMSFault">
				<annotation>
					<documentation>The entity already exists in GMS.
        </documentation>
				</annotation>
			</element>

			<element name="InvalidPlayerSessionFault" type="tns:GMSFault">
				<annotation>
					<documentation>The player session is invalid or can not be
						found.
        </documentation>
				</annotation>
			</element>

			<element name="ValidatePlayerSession_fault">
				<complexType>
					<sequence>

						<element name="ValidatePlayerSession_fault" type="string">
						</element>
					</sequence>
				</complexType>
			</element>


			<complexType name="ResponsibleGamingFault">
				<complexContent>
					<extension base="tns:GMSFault"/>
				</complexContent>
			</complexType>
			<element name="ResponsibleGamingFault" type="tns:ResponsibleGamingFault" />

			<complexType name="SelfExclusionFault">
				<complexContent>
					<extension base="tns:ResponsibleGamingFault">
						<sequence>
							<element name="endTime" type="tns:dateTime" minOccurs="0"/>
						</sequence>
					</extension>
				</complexContent>
			</complexType>
			<element name="SelfExclusionFault" type="tns:SelfExclusionFault" />

			<complexType name="ResponsibleGamingNotAvailableFault">
				<complexContent>
					<extension base="tns:ResponsibleGamingFault"/>
				</complexContent>
			</complexType>
			<element name="ResponsibleGamingNotAvailableFault" type="tns:ResponsibleGamingNotAvailableFault" />
		</schema>

	</types>

	<!--
		Define the messages that are going to be used in the API
	-->

	<message name="GetPlayerRegistrationLevelsSoapIn">
		<part name="parameters" element="tns:GetPlayerRegistrationLevels" />
	</message>

	<message name="GetPlayerRegistrationLevelsSoapOut">
		<part name="parameters" element="tns:PlayerRegistrationLevelsResponse" />
	</message>
	
	<message name="RegisterSoapIn">
		<part name="parameters" element="tns:Register" />
	</message>

	<message name="LoginSoapIn">
		<part name="parameters" element="tns:Login" />
	</message>

	<message name="LoginSoapOut">
		<part name="parameters" element="tns:LoginResponse" />
	</message>

	<message name="LoginWithTokenSoapIn">
		<part name="parameters" element="tns:LoginWithToken" />
	</message>

	<message name="LogoutSoapIn">
		<part name="parameters" element="tns:Logout" />
	</message>

	<message name="GetAccountBalanceSoapIn">
		<part name="parameters" element="tns:GetAccountBalance" />
	</message>

	<message name="GetAccountBalanceSoapOut">
		<part name="parameters" element="tns:GetAccountBalanceResponse" />
	</message>

	<message name="GetNickNameSoapIn">
		<part name="parameters" element="tns:GetNickName" />
	</message>

	<message name="GetNickNameSoapOut">
		<part name="parameters" element="tns:GetNickNameResponse" />
	</message>

	<message name="GetAllNickNamesSoapIn">
		<part name="parameters" element="tns:GetAllNickNames" />
	</message>

	<message name="GetAllNickNamesSoapOut">
		<part name="parameters" element="tns:GetAllNickNamesResponse" />
	</message>

	<message name="SetNickNameSoapIn">
		<part name="parameters" element="tns:SetNickName" />
	</message>

	<message name="IsUsernameAvailableSoapIn">
		<part name="parameters" element="tns:IsUsernameAvailable" />
	</message>

	<message name="IsUsernameAvailableSoapOut">
		<part name="parameters" element="tns:IsUsernameAvailableResponse" />
	</message>

	<message name="RedeemLoyaltyPointsSoapIn">
		<part name="parameters" element="tns:RedeemLoyaltyPoints" />
	</message>

	<message name="DeductLoyaltyPointsSoapIn">
		<part name="parameters" element="tns:DeductLoyaltyPoints" />
	</message>

	<message name="UpdatePasswordSoapIn">
		<part name="parameters" element="tns:UpdatePassword" />
	</message>

	<message name="RenewPasswordSoapIn">
		<part name="parameters" element="tns:RenewPassword" />
	</message>

	<message name="ReferAFriendSoapIn">
		<part name="parameters" element="tns:ReferAFriend" />
	</message>

	<message name="ActivateAccountSoapIn">
		<part name="parameters" element="tns:ActivateAccount" />
	</message>

	<message name="VerifyEmailSoapIn">
		<part name="parameters" element="tns:VerifyEmail" />
	</message>

    <message name="VerifySMSSoapIn">
        <part name="parameters" element="tns:VerifySMS" />
    </message>

    <message name="UpdatePlayerDetailsSoapIn">
		<part name="parameters" element="tns:UpdatePlayerDetails" />
	</message>

	<message name="GetPlayerDetailsSoapIn">
		<part name="parameters" element="tns:GetPlayerDetails" />
	</message>

	<message name="GetPlayerDetailsSoapOut">
		<part name="parameters" element="tns:GetPlayerDetailsResponse" />
	</message>

	<message name="VerifyAuthenticationTokenSoapIn">
		<part name="parameters" element="tns:VerifyAuthenticationToken" />
	</message>

	<message name="VerifyAuthenticationTokenSoapOut">
		<part name="parameters" element="tns:VerifyAuthenticationTokenResponse" />
	</message>

	<message name="GetGameAccountBalanceSoapIn">
		<part name="parameters" element="tns:GetGameAccountBalance" />
	</message>

	<message name="GetGameAccountBalanceSoapOut">
		<part name="parameters" element="tns:GetGameAccountBalanceResponse" />
	</message>

	<message name="GetAuthenticationTokenSoapIn">
		<part name="parameters" element="tns:GetAuthenticationToken" />
	</message>

	<message name="GetAuthenticationTokenSoapOut">
		<part name="parameters" element="tns:GetAuthenticationTokenResponse" />
	</message>

	<message name="GetBonusRewardDetailsSoapIn">
		<part name="parameters" element="tns:GetBonusRewardDetails" />
	</message>

	<message name="GetBonusRewardDetailsSoapOut">
		<part name="parameters" element="tns:GetBonusRewardDetailsResponse" />
	</message>

	<message name="GetPendingPayoutDetailsSoapIn">
		<part name="parameters" element="tns:GetPendingPayoutDetails" />
	</message>

	<message name="GetPendingPayoutDetailsSoapOut">
		<part name="parameters" element="tns:GetPendingPayoutDetailsResponse" />
	</message>

	<message name="GetReferAFriendStatusSoapIn">
		<part name="parameters" element="tns:GetReferAFriendStatus" />
	</message>

	<message name="GetReferAFriendStatusSoapOut">
		<part name="parameters" element="tns:GetReferAFriendStatusResponse" />
	</message>

	<message name="GetRewardTransactionsSoapIn">
		<part name="parameters" element="tns:GetRewardTransactions" />
	</message>

	<message name="GetRewardTransactionsSoapOut">
		<part name="parameters" element="tns:GetRewardTransactionsResponse" />
	</message>

	<message name="GetGamingTransactionsSoapIn">
		<part name="parameters" element="tns:GetGamingTransactions" />
	</message>

	<message name="GetGamingTransactionsSoapOut">
		<part name="parameters" element="tns:GetGamingTransactionsResponse" />
	</message>

	<message name="GetPaymentTransactionsSoapIn">
		<part name="parameters" element="tns:GetPaymentTransactions" />
	</message>

	<message name="GetPaymentTransactionsSoapOut">
		<part name="parameters" element="tns:GetPaymentTransactionsResponse" />
	</message>

	<message name="GetBonusBalanceSoapIn">
		<part name="parameters" element="tns:GetBonusBalance" />
	</message>

	<message name="GetBonusBalanceSoapOut">
		<part name="parameters" element="tns:GetBonusBalanceResponse" />
	</message>

	<message name="GetAvailableCountriesSoapIn">
		<part name="parameters" element="tns:GetAvailableCountries" />
	</message>

	<message name="GetAvailableCountriesSoapOut">
		<part name="parameters" element="tns:GetAvailableCountriesResponse" />
	</message>

	<message name="GetPayoutStatisticsSoapIn">
		<part name="parameters" element="tns:GetPayoutStatistics" />
	</message>

	<message name="GetPayoutStatisticsSoapOut">
		<part name="parameters" element="tns:GetPayoutStatisticsResponse" />
	</message>

	<message name="GetBiggestWinnersSoapIn">
		<part name="parameters" element="tns:GetBiggestWinners" />
	</message>

	<message name="GetBiggestWinnersSoapOut">
		<part name="parameters" element="tns:GetBiggestWinnersResponse" />
	</message>

	<message name="GetRecentWinnersSoapIn">
		<part name="parameters" element="tns:GetRecentWinners" />
	</message>

	<message name="GetRecentWinnersSoapOut">
		<part name="parameters" element="tns:GetRecentWinnersResponse" />
	</message>

	<message name="GetJackpotWinnersSoapIn">
		<part name="parameters" element="tns:GetJackpotWinners" />
	</message>

	<message name="GetJackpotWinnersSoapOut">
		<part name="parameters" element="tns:GetJackpotWinnersResponse" />
	</message>

	<message name="VerifyAdminUserAuthTokenSoapIn">
		<part name="parameters" element="tns:VerifyAdminUserAuthToken" />
	</message>

	<message name="VerifyAdminUserAuthTokenSoapOut">
		<part name="parameters" element="tns:VerifyAdminUserAuthTokenResponse" />
	</message>

	<message name="GetCurrentPlayersSoapIn">
		<part name="parameters" element="tns:GetCurrentPlayers" />
	</message>

	<message name="GetCurrentPlayersSoapOut">
		<part name="parameters" element="tns:GetCurrentPlayersResponse" />
	</message>

	<message name="Void">
		<part name="parameters" element="tns:Void" />
	</message>

	<message name="ValidatePlayerSessionSoapIn">
		<part name="parameters" element="tns:ValidatePlayerSession" />
	</message>

	<message name="ValidatePlayerSessionSoapOut">
		<part name="parameters" element="tns:ValidatePlayerSessionResponse" />
	</message>

	<message name="RegisterPromotionCodeSoapIn">
		<part name="parameters" element="tns:RegisterPromotionCode" />
	</message>

	<message name="SetSessionLimitRequest">
		<part name="SetSessionLimitRequest" element="tns:SetSessionLimitRequest" />
	</message>

	<message name="SetSessionLimitResponse">
		<part name="SetSessionLimitResponse" element="tns:SetSessionLimitResponse" />
	</message>
	
	<message name="SetWagerLimitsRequest">
		<part name="SetWagerLimitsRequest" element="tns:SetWagerLimitsRequest" />
	</message>

	<message name="SetWagerLimitsResponse">
		<part name="SetWagerLimitsResponse" element="tns:SetWagerLimitsResponse" />
	</message>
	
	<message name="SetLossLimitsRequest">
		<part name="SetLossLimitsRequest" element="tns:SetLossLimitsRequest" />
	</message>

	<message name="SetLossLimitsResponse">
		<part name="SetLossLimitsResponse" element="tns:SetLossLimitsResponse" />
	</message>

    <message name="SetRealityCheckEnabledRequest">
        <part name="SetRealityCheckEnabledRequest" element="tns:SetRealityCheckEnabledRequest" />
	</message>

	<message name="WillBecomePermanentRequest">
		<part name="WillBecomePermanentRequest" element="tns:WillBecomePermanentRequest" />
	</message>

	<message name="WillBecomePermanentResponse">
		<part name="WillBecomePermanentResponse" element="tns:WillBecomePermanentResponse" />
	</message>

	<message name="SelfExcludeRequest">
		<part name="SelfExcludeRequest" element="tns:SelfExcludeRequest" />
	</message>

	<message name="SelfExcludeResponse">
		<part name="SelfExcludeResponse" element="tns:SelfExcludeResponse" />
	</message>

	<message name="GetResponsibleGamingSettingsRequest">
	    <part name="GetResponsibleGamingSettingsRequest" element="tns:GetResponsibleGamingSettingsRequest" />
	</message>

    <message name="GetResponsibleGamingSettingsResponse">
	    <part name="GetResponsibleGamingSettingsResponse" element="tns:GetResponsibleGamingSettingsResponse" />
	</message>

	<message name="GetRewardDetailsRequest">
    	<part name="GetRewardDetailsRequest" element="tns:GetRewardDetailsRequest" />
  	</message>

	<message name="RewardDetails">
    	<part name="RewardDetails" element="tns:RewardDetails" />
	</message>

	<message name="GetSelfExclusionsRequest">
    	<part name="GetSelfExclusionsRequest" element="tns:GetSelfExclusionsRequest" />
  	</message>

	<message name="SelfExclusions">
    	<part name="SelfExclusions" element="tns:SelfExclusions" />
	</message>

	<!-- FAULT MESSAGES -->

	<message name="InternalFault">
		<part name="InternalFault" element="tns:InternalFault" />
	</message>

	<message name="InvalidArgumentFault">
		<part name="InvalidArgumentFault" element="tns:InvalidArgumentFault" />
	</message>

	<message name="EntityNotFoundFault">
		<part name="EntityNotFoundFault" element="tns:EntityNotFoundFault" />
	</message>

	<message name="InvalidSessionFault">
		<part name="InvalidSessionFault" element="tns:InvalidSessionFault" />
	</message>

	<message name="AccessDeniedFault">
		<part name="AccessDeniedFault" element="tns:AccessDeniedFault" />
	</message>

	<message name="PlayerLockedFault">
		<part name="PlayerLockedFault" element="tns:PlayerLockedFault" />
	</message>

	<message name="LoginForbiddenFault">
		<part name="LoginForbiddenFault" element="tns:LoginForbiddenFault" />
	</message>

	<message name="RegistrationDeniedFault">
		<part name="RegistrationDeniedFault" element="tns:RegistrationDeniedFault" />
	</message>

	<message name="InvalidPropertyFault">
		<part name="InvalidPropertyFault" element="tns:InvalidPropertyFault" />
	</message>

	<message name="WrongPasswordFault">
		<part name="WrongPasswordFault" element="tns:WrongPasswordFault" />
	</message>

	<message name="PasswordFormatFault">
		<part name="PasswordFormatFault" element="tns:PasswordFormatFault" />
	</message>

	<message name="PlayerNotFoundFault">
		<part name="PlayerNotFoundFault" element="tns:PlayerNotFoundFault" />
	</message>

	<message name="PlayerPendingActivationFault">
		<part name="PlayerPendingActivationFault" element="tns:PlayerPendingActivationFault" />
	</message>

	<message name="RAFPropertyFault">
		<part name="RAFPropertyFault" element="tns:RAFPropertyFault" />
	</message>

	<message name="RAFInvalidEmailFormatFault">
		<part name="RAFInvalidEmailFormatFault" element="tns:RAFInvalidEmailFormatFault" />
	</message>

	<message name="RAFAllreadyReferedFault">
		<part name="RAFAllreadyReferedFault" element="tns:RAFAllreadyReferedFault" />
	</message>

	<message name="RAFExsistingPlayerFault">
		<part name="RAFExsistingPlayerFault" element="tns:RAFExsistingPlayerFault" />
	</message>

	<message name="RAFMaxReferalsFault">
		<part name="RAFMaxReferalsFault" element="tns:RAFMaxReferalsFault" />
	</message>

	<message name="RAFNoProgramFault">
		<part name="RAFNoProgramFault" element="tns:RAFNoProgramFault" />
	</message>

	<message name="ToLowLoyaltyPointsBalanceFault">
		<part name="ToLowLoyaltyPointsBalanceFault" element="tns:ToLowLoyaltyPointsBalanceFault" />
	</message>

	<message name="LowerLoyaltyPointsLimitNotReachedFault">
		<part name="LowerLoyaltyPointsLimitNotReachedFault" element="tns:LowerLoyaltyPointsLimitNotReachedFault" />
	</message>

	<message name="InvalidTokenFault">
		<part name="InvalidTokenFault" element="tns:InvalidTokenFault" />
	</message>

	<message name="InsufficientFundsFault">
		<part name="InsufficientFundsFault" element="tns:InsufficientFundsFault" />
	</message>

	<message name="InvalidPlayerFault">
		<part name="InvalidPlayerFault" element="tns:InvalidPlayerFault" />
	</message>

	<message name="InvalidCurrencyFault">
		<part name="InvalidCurrencyFault" element="tns:InvalidCurrencyFault" />
	</message>

	<message name="ParameterFault">
		<part name="ParameterFault" element="tns:ParameterFault" />
	</message>

	<message name="GeneralFault">
		<part name="GeneralFault" element="tns:GeneralFault" />
	</message>

	<message name="UnknownEntityFault">
		<part name="UnknownEntityFault" element="tns:UnknownEntityFault" />
	</message>

	<message name="DuplicateEntityFault">
		<part name="DuplicateEntityFault" element="tns:DuplicateEntityFault" />
	</message>

	<message name="InvalidPlayerSessionFault">
		<part name="InvalidPlayerSessionFault" element="tns:InvalidPlayerSessionFault" />
	</message>

	<message name="ResponsibleGamingFault">
		<part name="ResponsibleGamingFault" element="tns:ResponsibleGamingFault" />
	</message>

	<message name="SelfExclusionFault">
		<part name="SelfExclusionFault" element="tns:SelfExclusionFault" />
	</message>

	<message name="ResponsibleGamingNotAvailableFault">
		<part name="ResponsibleGamingNotAvailableFault" element="tns:ResponsibleGamingNotAvailableFault" />
	</message>




	<!--
   The actual interface definition
  -->

	<wsdl:message name="ValidatePlayerSession_faultMsg">
		<wsdl:part name="parameters" element="tns:ValidatePlayerSession_fault"></wsdl:part>
	</wsdl:message>
	<portType name="GenericPortalAdapterPortType">

		<operation name="Register">
			<input message="tns:RegisterSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="RegistrationDeniedFault" message="tns:RegistrationDeniedFault" />
			<fault name="InvalidPropertyFault" message="tns:InvalidPropertyFault" />
		</operation>

		<operation name="Login">
			<input message="tns:LoginSoapIn" />
			<output message="tns:LoginSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="AccessDeniedFault" message="tns:AccessDeniedFault" />
			<fault name="PlayerLockedFault" message="tns:PlayerLockedFault" />
			<fault name="LoginForbiddenFault" message="tns:LoginForbiddenFault" />
			<fault name="PlayerPendingActivationFault" message="tns:PlayerPendingActivationFault" />
		    <fault name="SelfExclusionFault" message="tns:SelfExclusionFault" />
		</operation>

		<operation name="LoginWithToken">
			<input message="tns:LoginWithTokenSoapIn" />
			<output message="tns:LoginSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="AccessDeniedFault" message="tns:AccessDeniedFault" />
			<fault name="PlayerLockedFault" message="tns:PlayerLockedFault" />
			<fault name="LoginForbiddenFault" message="tns:LoginForbiddenFault" />
			<fault name="PlayerPendingActivationFault" message="tns:PlayerPendingActivationFault" />
		    <fault name="SelfExclusionFault" message="tns:SelfExclusionFault" />
		</operation>

		<operation name="Logout">
			<input message="tns:LogoutSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetAccountBalance">
			<input message="tns:GetAccountBalanceSoapIn" />
			<output message="tns:GetAccountBalanceSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetNickName">
			<input message="tns:GetNickNameSoapIn" />
			<output message="tns:GetNickNameSoapOut" />
			<fault name="ParameterFault" message="tns:ParameterFault" />
			<fault name="UnknownEntityFault" message="tns:UnknownEntityFault" />
			<fault name="InvalidPlayerSessionFault" message="tns:InvalidPlayerSessionFault" />
			<fault name="GeneralFault" message="tns:GeneralFault" />
		</operation>

		<operation name="GetAllNickNames">
			<input message="tns:GetAllNickNamesSoapIn" />
			<output message="tns:GetAllNickNamesSoapOut" />
			<fault name="ParameterFault" message="tns:ParameterFault" />
			<fault name="InvalidPlayerSessionFault" message="tns:InvalidPlayerSessionFault" />
			<fault name="UnknownEntityFault" message="tns:UnknownEntityFault" />
			<fault name="GeneralFault" message="tns:GeneralFault" />
		</operation>

		<operation name="SetNickName">
			<input message="tns:SetNickNameSoapIn" />
			<output message="tns:Void" />
			<fault name="ParameterFault" message="tns:ParameterFault" />
			<fault name="UnknownEntityFault" message="tns:UnknownEntityFault" />
			<fault name="DuplicateEntityFault" message="tns:DuplicateEntityFault" />
			<fault name="InvalidPlayerSessionFault" message="tns:InvalidPlayerSessionFault" />
			<fault name="GeneralFault" message="tns:GeneralFault" />
		</operation>

		<operation name="IsUsernameAvailable">
			<input message="tns:IsUsernameAvailableSoapIn" />
			<output message="tns:IsUsernameAvailableSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="RedeemLoyaltyPoints">
			<input message="tns:RedeemLoyaltyPointsSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="ToLowLoyaltyPointsBalanceFault" message="tns:ToLowLoyaltyPointsBalanceFault" />
			<fault name="LowerLoyaltyPointsLimitNotReachedFault" message="tns:LowerLoyaltyPointsLimitNotReachedFault" />
		</operation>

		<operation name="DeductLoyaltyPoints">
			<input message="tns:DeductLoyaltyPointsSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="ToLowLoyaltyPointsBalanceFault" message="tns:ToLowLoyaltyPointsBalanceFault" />
		</operation>

		<operation name="UpdatePassword">
			<input message="tns:UpdatePasswordSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="PasswordFormatFault" message="tns:PasswordFormatFault" />
			<fault name="WrongPasswordFault" message="tns:WrongPasswordFault" />
		</operation>

		<operation name="RenewPassword">
			<input message="tns:RenewPasswordSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="PlayerNotFoundFault" message="tns:PlayerNotFoundFault" />
		</operation>

		<operation name="ReferAFriend">
			<input message="tns:ReferAFriendSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="RAFPropertyFault" message="tns:RAFPropertyFault" />
			<fault name="RAFInvalidEmailFormatFault" message="tns:RAFInvalidEmailFormatFault" />
			<fault name="RAFAllreadyReferedFault" message="tns:RAFAllreadyReferedFault" />
			<fault name="RAFExsistingPlayerFault" message="tns:RAFExsistingPlayerFault" />
			<fault name="RAFMaxReferalsFault" message="tns:RAFMaxReferalsFault" />
			<fault name="RAFNoProgramFault" message="tns:RAFNoProgramFault" />
		</operation>

		<operation name="ActivateAccount">
			<input message="tns:ActivateAccountSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="VerifyEmail">
			<input message="tns:VerifyEmailSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

	    <operation name="VerifySMS">
	        <input message="tns:VerifySMSSoapIn" />
	        <output message="tns:Void" />
	        <fault name="InternalFault" message="tns:InternalFault" />
	        <fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
	        <fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
	    </operation>
	    
		<operation name="UpdatePlayerDetails">
			<input message="tns:UpdatePlayerDetailsSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidPropertyFault" message="tns:InvalidPropertyFault" />
		</operation>

		<operation name="GetPlayerDetails">
			<input message="tns:GetPlayerDetailsSoapIn" />
			<output message="tns:GetPlayerDetailsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="VerifyAuthenticationToken">
			<input message="tns:VerifyAuthenticationTokenSoapIn" />
			<output message="tns:VerifyAuthenticationTokenSoapOut" />
			<fault name="InvalidTokenFault" message="tns:InvalidTokenFault" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetGameAccountBalance">
			<input message="tns:GetGameAccountBalanceSoapIn" />
			<output message="tns:GetGameAccountBalanceSoapOut" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
		</operation>

		<operation name="GetAuthenticationToken">
			<input message="tns:GetAuthenticationTokenSoapIn" />
			<output message="tns:GetAuthenticationTokenSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetBonusRewardDetails">
			<input message="tns:GetBonusRewardDetailsSoapIn" />
			<output message="tns:GetBonusRewardDetailsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetPendingPayoutDetails">
			<input message="tns:GetPendingPayoutDetailsSoapIn" />
			<output message="tns:GetPendingPayoutDetailsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetReferAFriendStatus">
			<input message="tns:GetReferAFriendStatusSoapIn" />
			<output message="tns:GetReferAFriendStatusSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetRewardTransactions">
			<input message="tns:GetRewardTransactionsSoapIn" />
			<output message="tns:GetRewardTransactionsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetGamingTransactions">
			<input message="tns:GetGamingTransactionsSoapIn" />
			<output message="tns:GetGamingTransactionsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetPaymentTransactions">
			<input message="tns:GetPaymentTransactionsSoapIn" />
			<output message="tns:GetPaymentTransactionsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetBonusBalance">
			<input message="tns:GetBonusBalanceSoapIn" />
			<output message="tns:GetBonusBalanceSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetAvailableCountries">
			<input message="tns:GetAvailableCountriesSoapIn" />
			<output message="tns:GetAvailableCountriesSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="GetPayoutStatistics">
			<input message="tns:GetPayoutStatisticsSoapIn" />
			<output message="tns:GetPayoutStatisticsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
		</operation>

		<operation name="GetBiggestWinners">
			<input message="tns:GetBiggestWinnersSoapIn" />
			<output message="tns:GetBiggestWinnersSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
		</operation>

		<operation name="GetRecentWinners">
			<input message="tns:GetRecentWinnersSoapIn" />
			<output message="tns:GetRecentWinnersSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
		</operation>

		<operation name="GetJackpotWinners">
			<input message="tns:GetJackpotWinnersSoapIn" />
			<output message="tns:GetJackpotWinnersSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidCurrencyFault" message="tns:InvalidCurrencyFault" />
		</operation>

		<operation name="VerifyAdminUserAuthToken">
			<input message="tns:VerifyAdminUserAuthTokenSoapIn" />
			<output message="tns:VerifyAdminUserAuthTokenSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidTokenFault" message="tns:InvalidTokenFault" />
		</operation>

		<operation name="GetCurrentPlayers">
			<input message="tns:GetCurrentPlayersSoapIn" />
			<output message="tns:GetCurrentPlayersSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>

		<operation name="ValidatePlayerSession">
			<input message="tns:ValidatePlayerSessionSoapIn" />
			<output message="tns:ValidatePlayerSessionSoapOut" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidPlayerSessionFault" message="tns:InvalidPlayerSessionFault" />
			<fault name="PlayerLockedFault" message="tns:PlayerLockedFault" />
		</operation>

		<operation name="RegisterPromotionCode">
			<input message="tns:RegisterPromotionCodeSoapIn" />
			<output message="tns:Void" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
		</operation>

		<operation name="SetSessionLimit">
			<input message="tns:SetSessionLimitRequest" />
			<output message="tns:SetSessionLimitResponse" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="ResponsibleGamingNotAvailableFault" message="tns:ResponsibleGamingNotAvailableFault" />
		</operation>
		
		<operation name="SetWagerLimits">
			<input message="tns:SetWagerLimitsRequest" />
			<output message="tns:SetWagerLimitsResponse" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="ResponsibleGamingNotAvailableFault" message="tns:ResponsibleGamingNotAvailableFault" />
		</operation>
		
		<operation name="SetLossLimits">
			<input message="tns:SetLossLimitsRequest" />
			<output message="tns:SetLossLimitsResponse" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="ResponsibleGamingNotAvailableFault" message="tns:ResponsibleGamingNotAvailableFault" />
		</operation>
		
	    <operation name="SetRealityCheckEnabled">
	        <input message="tns:SetRealityCheckEnabledRequest" />
			<output message="tns:Void" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="ResponsibleGamingNotAvailableFault" message="tns:ResponsibleGamingNotAvailableFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>
		<operation name="WillBecomePermanent">
			<input message="tns:WillBecomePermanentRequest" />
			<output message="tns:WillBecomePermanentResponse" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
		</operation>
		<operation name="SelfExclude">
			<input message="tns:SelfExcludeRequest" />
			<output message="tns:SelfExcludeResponse" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="ResponsibleGamingNotAvailableFault" message="tns:ResponsibleGamingNotAvailableFault" />
		</operation>
	    <operation name="GetResponsibleGamingSettings">
	        <input message="tns:GetResponsibleGamingSettingsRequest" />
	        <output message="tns:GetResponsibleGamingSettingsResponse" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
		</operation>
	    <operation name="GetRewardDetails">
	        <input message="tns:GetRewardDetailsRequest" />
	        <output message="tns:RewardDetails" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
	    </operation>
	    <operation name="GetSelfExclusions">
	        <input message="tns:GetSelfExclusionsRequest" />
	        <output message="tns:SelfExclusions" />

			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="InvalidSessionFault" message="tns:InvalidSessionFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
	    </operation>
	    
	    <operation name="GetPlayerRegistrationLevels">
			<input message="tns:GetPlayerRegistrationLevelsSoapIn" />
			<output message="tns:GetPlayerRegistrationLevelsSoapOut" />
			<fault name="InternalFault" message="tns:InternalFault" />
			<fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault" />
			<fault name="EntityNotFoundFault" message="tns:EntityNotFoundFault" />
			<fault name="AccessDeniedFault" message="tns:AccessDeniedFault" />		
		</operation>

	</portType>

	<!--
   Specify the binding of the type
  -->

	<binding name="GenericPortalAdapterBinding" type="tns:GenericPortalAdapterPortType">
		<soap:binding transport="http://schemas.xmlsoap.org/soap/http"
			style="document" />

		<operation name="Register">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="RegistrationDeniedFault">
				<soap:fault name="RegistrationDeniedFault" use="literal" />
			</fault>
			<fault name="InvalidPropertyFault">
				<soap:fault name="InvalidPropertyFault" use="literal" />
			</fault>
		</operation>

		<operation name="Login">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="AccessDeniedFault">
				<soap:fault name="AccessDeniedFault" use="literal" />
			</fault>
			<fault name="PlayerLockedFault">
				<soap:fault name="PlayerLockedFault" use="literal" />
			</fault>
			<fault name="LoginForbiddenFault">
				<soap:fault name="LoginForbiddenFault" use="literal" />
			</fault>
			<fault name="PlayerPendingActivationFault">
				<soap:fault name="PlayerPendingActivationFault" use="literal" />
			</fault>
		    <fault name="SelfExclusionFault">
		        <soap:fault name="SelfExclusionFault" use="literal" />
		    </fault>
		</operation>

		<operation name="LoginWithToken">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="AccessDeniedFault">
				<soap:fault name="AccessDeniedFault" use="literal" />
			</fault>
			<fault name="PlayerLockedFault">
				<soap:fault name="PlayerLockedFault" use="literal" />
			</fault>
			<fault name="LoginForbiddenFault">
				<soap:fault name="LoginForbiddenFault" use="literal" />
			</fault>
			<fault name="PlayerPendingActivationFault">
				<soap:fault name="PlayerPendingActivationFault" use="literal" />
			</fault>
		    <fault name="SelfExclusionFault">
		        <soap:fault name="SelfExclusionFault" use="literal" />
		    </fault>
		</operation>

		<operation name="Logout">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetAccountBalance">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetNickName">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="ParameterFault">
				<soap:fault name="ParameterFault" use="literal" />
			</fault>
			<fault name="UnknownEntityFault">
				<soap:fault name="UnknownEntityFault" use="literal" />
			</fault>
			<fault name="InvalidPlayerSessionFault">
				<soap:fault name="InvalidPlayerSessionFault" use="literal" />
			</fault>
			<fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetAllNickNames">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="ParameterFault">
				<soap:fault name="ParameterFault" use="literal" />
			</fault>
			<fault name="InvalidPlayerSessionFault">
				<soap:fault name="InvalidPlayerSessionFault" use="literal" />
			</fault>
			<fault name="UnknownEntityFault">
				<soap:fault name="UnknownEntityFault" use="literal" />
			</fault>
			<fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal" />
			</fault>
		</operation>

		<operation name="SetNickName">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="ParameterFault">
				<soap:fault name="ParameterFault" use="literal" />
			</fault>
			<fault name="UnknownEntityFault">
				<soap:fault name="UnknownEntityFault" use="literal" />
			</fault>
			<fault name="DuplicateEntityFault">
				<soap:fault name="DuplicateEntityFault" use="literal" />
			</fault>
			<fault name="InvalidPlayerSessionFault">
				<soap:fault name="InvalidPlayerSessionFault" use="literal" />
			</fault>
			<fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal" />
			</fault>
		</operation>

		<operation name="IsUsernameAvailable">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="RedeemLoyaltyPoints">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="ToLowLoyaltyPointsBalanceFault">
				<soap:fault name="ToLowLoyaltyPointsBalanceFault" use="literal" />
			</fault>
			<fault name="LowerLoyaltyPointsLimitNotReachedFault">
				<soap:fault name="LowerLoyaltyPointsLimitNotReachedFault"
					use="literal" />
			</fault>
		</operation>

		<operation name="DeductLoyaltyPoints">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="ToLowLoyaltyPointsBalanceFault">
				<soap:fault name="ToLowLoyaltyPointsBalanceFault" use="literal" />
			</fault>
		</operation>

		<operation name="UpdatePassword">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="PasswordFormatFault">
				<soap:fault name="PasswordFormatFault" use="literal" />
			</fault>
			<fault name="WrongPasswordFault">
				<soap:fault name="WrongPasswordFault" use="literal" />
			</fault>
		</operation>

		<operation name="RenewPassword">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="PlayerNotFoundFault">
				<soap:fault name="PlayerNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="ReferAFriend">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="RAFPropertyFault">
				<soap:fault name="RAFPropertyFault" use="literal" />
			</fault>
			<fault name="RAFInvalidEmailFormatFault">
				<soap:fault name="RAFInvalidEmailFormatFault" use="literal" />
			</fault>
			<fault name="RAFAllreadyReferedFault">
				<soap:fault name="RAFAllreadyReferedFault" use="literal" />
			</fault>
			<fault name="RAFExsistingPlayerFault">
				<soap:fault name="RAFExsistingPlayerFault" use="literal" />
			</fault>
			<fault name="RAFMaxReferalsFault">
				<soap:fault name="RAFMaxReferalsFault" use="literal" />
			</fault>
			<fault name="RAFNoProgramFault">
				<soap:fault name="RAFNoProgramFault" use="literal" />
			</fault>
		</operation>

		<operation name="ActivateAccount">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="VerifyEmail">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

	    <operation name="VerifySMS">
	        <soap:operation soapAction="" />
	        <input>
	            <soap:body use="literal" />
	        </input>
	        <output>
	            <soap:body use="literal" />
	        </output>
	        <fault name="InternalFault">
	            <soap:fault name="InternalFault" use="literal" />
	        </fault>
	        <fault name="InvalidArgumentFault">
	            <soap:fault name="InvalidArgumentFault" use="literal" />
	        </fault>
	        <fault name="EntityNotFoundFault">
	            <soap:fault name="EntityNotFoundFault" use="literal" />
	        </fault>
	    </operation>
	    
		<operation name="UpdatePlayerDetails">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidPropertyFault">
				<soap:fault name="InvalidPropertyFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetPlayerDetails">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="VerifyAuthenticationToken">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidTokenFault">
				<soap:fault name="InvalidTokenFault" use="literal" />
			</fault>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetGameAccountBalance">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetAuthenticationToken">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetBonusRewardDetails">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetPendingPayoutDetails">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetReferAFriendStatus">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetRewardTransactions">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetGamingTransactions">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetPaymentTransactions">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetBonusBalance">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetAvailableCountries">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetPayoutStatistics">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetBiggestWinners">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetRecentWinners">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetJackpotWinners">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidCurrencyFault">
				<soap:fault name="InvalidCurrencyFault" use="literal" />
			</fault>
		</operation>

		<operation name="VerifyAdminUserAuthToken">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidTokenFault">
				<soap:fault name="InvalidTokenFault" use="literal" />
			</fault>
		</operation>

		<operation name="GetCurrentPlayers">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
		</operation>

		<operation name="ValidatePlayerSession">
			<soap:operation soapAction="urn:GMSAdapterEndpoint#ValidatePlayerSession" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" />
			</fault>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" />
			</fault>
			<fault name="InvalidPlayerSessionFault">
				<soap:fault name="InvalidPlayerSessionFault" />
			</fault>
			<fault name="PlayerLockedFault">
				<soap:fault name="PlayerLockedFault" />
			</fault>
		</operation>

		<operation name="RegisterPromotionCode">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="InvalidSessionFault">
				<soap:fault name="InvalidSessionFault" use="literal" />
			</fault>
		</operation>

		<operation name="SetSessionLimit">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
			<fault name="ResponsibleGamingNotAvailableFault"> <soap:fault name="ResponsibleGamingNotAvailableFault" use="literal" /> </fault>
		</operation>
		
		<operation name="SetWagerLimits">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
			<fault name="ResponsibleGamingNotAvailableFault"> <soap:fault name="ResponsibleGamingNotAvailableFault" use="literal" /> </fault>
		</operation>
		
		<operation name="SetLossLimits">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
			<fault name="ResponsibleGamingNotAvailableFault"> <soap:fault name="ResponsibleGamingNotAvailableFault" use="literal" /> </fault>
		</operation>

	    <operation name="SetRealityCheckEnabled">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
			<fault name="ResponsibleGamingNotAvailableFault"> <soap:fault name="ResponsibleGamingNotAvailableFault" use="literal" /> </fault>
			<fault name="EntityNotFoundFault"> <soap:fault name="EntityNotFoundFault" use="literal" /> </fault>

		</operation>

		<operation name="WillBecomePermanent">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
		</operation>

		<operation name="SelfExclude">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
			<fault name="ResponsibleGamingNotAvailableFault"> <soap:fault name="ResponsibleGamingNotAvailableFault" use="literal" /> </fault>
		</operation>

	    <operation name="GetResponsibleGamingSettings">
			<soap:operation soapAction=""/>
			<input> <soap:body use="literal" /> </input>
			<output> <soap:body use="literal" /> </output>

			<fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
			<fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
			<fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
			<fault name="EntityNotFoundFault"> <soap:fault name="EntityNotFoundFault" use="literal" /> </fault>

		</operation>

	    <operation name="GetRewardDetails">
	      <soap:operation soapAction=""/>
	      <input> <soap:body use="literal" /> </input>
	      <output> <soap:body use="literal" /> </output>

	      <fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
	      <fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
	      <fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
	      <fault name="EntityNotFoundFault"> <soap:fault name="EntityNotFoundFault" use="literal" /> </fault>
	    </operation>

	    <operation name="GetSelfExclusions">
	      <soap:operation soapAction=""/>
	      <input> <soap:body use="literal" /> </input>
	      <output> <soap:body use="literal" /> </output>

	      <fault name="InternalFault"> <soap:fault name="InternalFault" use="literal" /> </fault>
	      <fault name="InvalidArgumentFault"> <soap:fault name="InvalidArgumentFault" use="literal" /> </fault>
	      <fault name="InvalidSessionFault"> <soap:fault name="InvalidSessionFault" use="literal" /> </fault>
	      <fault name="EntityNotFoundFault"> <soap:fault name="EntityNotFoundFault" use="literal" /> </fault>
	    </operation>
	    
	    <operation name="GetPlayerRegistrationLevels">
			<soap:operation soapAction="" />
			<input>
				<soap:body use="literal" />
			</input>
			<output>
				<soap:body use="literal" />
			</output>
			<fault name="InternalFault">
				<soap:fault name="InternalFault" use="literal" />
			</fault>
			<fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal" />
			</fault>
			<fault name="EntityNotFoundFault">
				<soap:fault name="EntityNotFoundFault" use="literal" />
			</fault>
			<fault name="AccessDeniedFault">
				<soap:fault name="AccessDeniedFault" use="literal" />
			</fault>			
		</operation>

	</binding>

	<service name="GenericPortalAdapterService">
		<port name="GenericPortalAdapterPort" binding="tns:GenericPortalAdapterBinding">
			<soap:address location="http://replace_by_real_url" />
		</port>
	</service>

</definitions>