{"repo_token":"dJnXWUtZ1lvRuTBNINsRTeaLGA2GyHLbx","git":{"branch":"master","head":{"id":"b54ddb89a2f8849b053ace7cb712563dd680c52e","author_name":"Vasil Dakov","author_email":"vasildakov@gmail.com","committer_name":"Vasil Dakov","committer_email":"vasildakov@gmail.com","message":"updated gpa tests"},"remotes":[{"name":"origin","url":"https:\/\/github.com\/vasildakov\/boss-poker-gds.git"}]},"run_at":"2014-04-06 19:39:41 +0000","source_files":[{"name":"GDS\/GenericPortalAdapter.php","source":"<?php\n\/**\n * GenericPortalAdapter Client\n * \n * @author    Vasil Dakov <vasildakov@gmail.com>\n * @copyright Copyright 2014 Vasil Dakov\n * @package   GDS\n *\/\n\nnamespace VasilDakov\\GDS;\n\nuse VasilDakov\\GDS\\GenericPortalAdapter\\Request\\RegisterRequest;\nuse VasilDakov\\GDS\\GenericPortalAdapter\\Request\\LoginRequest;\nuse VasilDakov\\GDS\\GenericPortalAdapter\\Request\\LogoutRequest;\n\nclass GenericPortalAdapter extends \\SoapClient { \n\n\n    const API_VERSION = '1.3.3';\n\n    private static $classmap = array(\n      'Register' => 'Register',\n      'Login'    => 'Login',\n      'Logout'   => 'Logout'\n      );\n\n\n\n    public function __construct($wsdl, $options = array()) \n    {\n        parent::__construct($wsdl, $options);\n\n        foreach(self::$classmap as $key => $value) \n        {\n            if(!isset($options['classmap'][$key])) {\n                $options['classmap'][$key] = $value;\n            }\n        }\n    }\t\n\n\n    \/**\n     * This method will register a player in GMS.\n     * \n     * @param RegisterRequest $request\n     *\/\n    public function Register(RegisterRequest $request) \n    {\n        return $this->__soapCall('Register', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Creates a session for a player and allows him to have access to session restricted services.\n     * \n     * @param LoginRequest $request\n     *\/\n    public function Login(LoginRequest $request) \n    {\n        return $this->__soapCall('Login', array(array(\"request\" => $request)), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Creates a session for a player and allows him to have access to session restricted services.\n     * \n     * @param $request  LoginWithTokenRequest \n     *\/\n    public function LoginWithToken(LoginWithTokenRequest $request) \n    {\n        return $this->__soapCall('LoginWithToken', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Terminates a player session.\n     * \n     * @param $request  LogoutRequest \n     *\/\n    public function Logout(LogoutRequest $request) \n    {\n        return $this->__soapCall('Logout', array(array(\"request\" => $request)), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Returns the balance of the players real money and bonus account balances.\n     * \n     * @param $request  AccountBalanceRequest\n     *\/\n    public function GetAccountBalance(AccountBalanceRequest $request) \n    {\n        return $this->__soapCall('GetAccountBalance', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Returns the game specific nickname associated with the player based on game system UID, \n     * if this doesn\u2019t exist then returns the player\u2019s preferred nickname and sets this to be the player\u2019s \n     * game system specific nickname, when both are null returns blank.\n     * \n     * @param $request  GetNickNameRequest\n     *\/\n    public function GetNickName(GetNickNameRequest $request) \n    {\n        return $this->__soapCall('GetNickName', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Returns player\u2019s preferred nickname (if exist) and list of game system specific \n     * nicknames associated with the player. Each GameSystemNickName object contains \n     * 1) Game System UID, 2) Game System Name and 3) Player\u2019s Game System specific nickname.\n     * \n     * @param $request  GetAllNickNamesRequest\n     *\/\n    public function GetAllNickNames(GetAllNickNamesRequest $request) \n    {\n        return $this->__soapCall('GetAllNickNames', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Set the game system specific nickname for the player based on provided game system UID. \n     * It also sets preferred nickname by performing a check, if the player doesn\u2019t have preferred \n     * nickname then the game specific nickname will be set as preferred nickname provided no other \n     * player has the same preferred nickname when the player\u2019s preferred nickname uniqueness level \n     * is set to whole system or per partner.\n     * \n     * @param $request  SetNickNameRequest\n     *\/\n    public function SetNickName(SetNickNameRequest $request) \n    {\n        return $this->__soapCall('SetNickName', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Check if the given username is available.\n     * \n     * @param $request  UsernameAvailableRequest\n     *\/\n    public function IsUsernameAvailable(UsernameAvailableRequest $request) \n    {\n        return $this->__soapCall('IsUsernameAvailable', array($request), array(\n            'uri' => 'bosscasinos\/GDS\/GenericPortalAdapter\/', 'soapaction' => ''\n            ));\n    }\n\n\n    \/**\n     * Redeems a players loyalty points.\n     * @param $request\n     *\/\n    public function RedeemLoyaltyPoints($request) {}\n\n\n    \/**\n     * Deducts loyalty points from a players loyalty points account.\n     * @param $request\n     *\/\n    public function DeductLoyaltyPoints($request) {}\n\n\n    \/**\n     * Updates a player\u2019s password to a new one if the old password matches the new one.\n     * @param $request\n     *\/\n    public function UpdatePassword($request) {}\n\n\n    \/**\n     * Sends a new password to the player's registered email if the username matches an existing player.\n     * @param $request\n     *\/\n    public function RenewPassword($request) {}\n\n\n    \/**\n     * Refers a friend to a player.\n     * @param $request\n     *\/\n    public function ReferAFriend($request) {}\n\n\n    \/**\n     * Activates an existing inactive account.\n     * @param $request\n     *\/\n    public function ActivateAccount($request) {}\n\n\n    \/**\n     * Verifies a player\u2019s registered email address. \n     * @param $request\n     *\/\n    public function VerifyEmail($request) {}\n\n\n    \/**\n     * Verifies a player\u2019s SMS.\n     * @param $request\n     *\/\n    public function VerifySMS($request) {}\n\n\n    \/**\n     * Updates the details about a player. \n     * The following details can not be updated with this method: Username, TrackingCampaign, Password, Currency.\n     * @param $request\n     *\/\n    public function UpdatePlayerDetails($request) {}\n\n\n    \/**\n     * Returns the details about a player.\n     * @param $request\n     *\/\n    public function GetPlayerDetails($request) {}\n\n\n    \/**\n     * VerifyAuthenticationToken\n     * @param $request\n     *\/\n    public function VerifyAuthenticationToken($request) {}\n\n\n    \/**\n     * This method gets the available balance that can be used for transfer to the specified game.\n     * @param $request\n     *\/\n    public function GetGameAccountBalance($request) {}\n\n\n    \/**\n     * Creates an authentication token for a player. \n     * This token is used by an external system to login to GMS. \n     * This token has a limited validity time that is determined by the GMS server.\n     * @param $request\n     *\/\n    public function GetAuthenticationToken($request) {}\n\n\n    \/**\n     * Returns an array with bonus reward details.\n     * @param $request\n     *\/\n    public function GetBonusRewardDetails($request) {}\n\n\n    \/**\n     * Returns an array with pending payout details.\n     * @param $request\n     *\/\n    public function GetPendingPayoutDetails($request) {}\n\n\n    \/**\n     * Returns the list of a players referred friends and their status.\n     * @param $request\n     *\/\n    public function GetReferAFriendStatus($request) {}\n\n\n    \/**\n     * Returns a list of reward transactions during a time period.\n     * @param $request\n     *\/\n    public function GetRewardTransactions($request) {}\n\n\n    \/**\n     * Returns a list of gaming transactions (the finished games) for the requested \n     * player during a time period. The amounts returned are in the players own currency.\n     * @param $request\n     *\/\n    public function GetGamingTransactions($request) {}\n\n\n    \/**\n     * Returns a list of payment transactions for the requested player during a time period. \n     * The amounts returned are in the players own currency.\n     * @param $request\n     *\/\n    public function GetPaymentTransactions($request) {}\n\n\n    \/**\n     * Returns an array of ongoing bonus balances per game.\n     * @param $request\n     *\/\n    public function GetBonusBalance($request) {}\n\n\n    \/**\n     * Returns a list of all countries for a system or for system and partnerUID\n     * @param $request\n     *\/\n    public function GetAvailableCountries($request) {}\n\n\n    \/**\n     * The total sum of the players result (win-staked) for requested time period in requested currency for a specific partner or for the operator. \n     * Result is cached and cache time could be configured, a minimum cache time is the time it takes to aggregate the data.\n     * @param $request\n     *\/\n    public function GetPayoutStatistics($request) {}\n\n\n    \/**\n     * Returns a maximum of 20 players with biggest result (win-stake) during the requested time period. \n     * Result is cached and cache time could be configured, a minimum cache time is the time it takes to aggregate the data.\n     * @param $request\n     *\/\n    public function GetBiggestWinners($request) {}\n\n\n    \/**\n     * Returns a list off recent players with positive player result (win-stake), this might be empty if the system is restarted or no one has won. \n     * Result is cached and cache time could be configured, a minimum cache time is the time it takes to aggregate the data.\n     * @param $request\n     *\/\n    public function GetRecentWinners($request) {}\n\n\n    \/**\n     * Returns a maximum of 20 jackpot winners during the requested time period. \n     * Result is cached and cache time could be configured, a minimum cache time is the time it takes to aggregate the data.\n     * @param $request\n     *\/\n    public function GetJackpotWinners($request) {}\n\n\n    \/**\n     * This method verifies an authentication token to find out the current GMS client user and the permissions of that user.\n     * @param $request\n     *\/\n    public function VerifyAdminUserAuthToken($request) {}\n\n\n    \/**\n     * This method returns counters of how many unique players that currently are logged on to the different game clients. \n     * Result is cached and cache time could be configured.\n     * @param $request\n     *\/\n    public function GetCurrentPlayers($request) {}\n\n\n    \/**\n     * This method validates a player session, either internally or externally depending on the partner associated with the game client. \n     * @param $request\n     *\/\n    public function ValidatePlayerSession($request) {}\n\n\n    \/**\n     * Register Promotion Code\n     * @param $request\n     *\/\n    public function RegisterPromotionCode($request) {}\n\n\n    \/**\n     * Set the responsible gaming session time limit for the player.\n     * @param $request\n     *\/\n    public function SetSessionLimit($request) {}\n\n\n    \/**\n     * Set Wager Limits\n     * @param $request\n     *\/\n    public function SetWagerLimits($request) {}\n\n\n    \/**\n     * Set Loss Limits \n     * @param $request\n     *\/\n    public function SetLossLimits($request) {}\n\n\n    \/**\n     * Enable \/ disable reality check for the player.\n     * @param $request\n     *\/\n    public function SetRealityCheckEnabled($request) {}\n\n\n    \/**\n     * Will Become Permanent\n     * @param $request\n     *\/\n    public function WillBecomePermanent($request) {}\n\n\n    \/**\n     * Self Exclude\n     * @param $request\n     *\/\n    public function SelfExclude($request) {}\n\n\n    \/**\n     * Returns all responsible gaming settings for the player.\n     * @param $request\n     *\/\n    public function GetResponsibleGamingSettings($request) {}\n\n\n    \/**\n     * Returns a list of BonusMoneyBag(s) and PendingBonusMoneyBag(s) irrespective of the bag status for given player Id.\n     * @param $request\n     *\/\n    public function GetRewardDetails($request) {}\n\n\n    \/**\n     * Returns a list of self exclusions for the player.\n     * @param $request\n     *\/\n    public function GetSelfExclusions($request) {}\n\n\n    \/**\n     * Returns the Player Registration Levels available in GMS.\n     * @param $request\n     *\/\n    public function GetPlayerRegistrationLevels($request) {}\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,null,6,6,6,6,6,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"GDS\/GenericPortalAdapter\/Collection\/PlayerPropertyCollection.php","source":"<?php\n\nnamespace VasilDakov\\GDS\\GenericPortalAdapter\\Collection;\n\nclass PlayerPropertyCollection extends \\ArrayObject implements \\IteratorAggregate, \\ArrayAccess, \\Serializable, \\Countable  {\n\n\tpublic $PlayerProperty = array();\n\n\tpublic function __construct(array $PlayerProperty = array()) \n\t{\n        if (!empty($PlayerProperty)) {\n            $this->PlayerProperty = $PlayerProperty;\n        }\n\t}\n\n\n    public function count()\n    {\n        return count($this->PlayerProperty);\n    }\n\n\n    public function rewind()\n    {\n        reset($this->PlayerProperty);\n    }\n\n\n    public function key()\n    {\n        return key($this->PlayerProperty);\n    }\n\n\n\tpublic function current()\n    {\n        return current($this->PlayerProperty);\n    }\n\n\n\tpublic function valid()\n    {\n        return ($this->current() !== false);\n    }\n\n    public function next()\n    {\n        next($this->_data);\n    }\n    \n\t\/**\n     * Add an element to the collection (implementation required by ArrayAccess interface)\n     * @param $key\n     * @param $value\n     *\/\n\tpublic function offsetSet($key, $value)\n    {\n        if ($key === null) {\n            if (!in_array($key, $this->_data, true)) {\n                $this->PlayerProperty[] = $value;\n                return true;\n            }\n        }\n        else if (!array_key_exists($key, $this->PlayerProperty)) {\n            $this->PlayerProperty[$key] = $value;\n            return true;\n        }\n        return false;\n    }\n\n\t\/**\n     * Remove an element from the collection\n     * @param $key\n     *\/\n    public function offsetUnset($key)\n    {\n        if (array_key_exists($key, $this->_data)) {\n            unset($this->_data[$key]);\n            return true;\n        }\n        return false;\n    }\n\n\t\/**\n     * Get the specified element in the collection\n     * @param $key\n     *\/\n    public function offsetGet($key)\n    {\n        return array_key_exists($key, $this->PlayerProperty) ?\n               $this->PlayerProperty[$key] :\n               null;\n    } \n\n\t\/**\n     * Check if the specified element exists in the collection\n     * @param $key\n     *\/  \n \tpublic function offsetExists($key)\n    {\n        return array_key_exists($key, $this->PlayerProperty);\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,3,0,0,3,null,null,null,null,1,null,null,null,null,null,0,0,null,null,null,null,0,null,null,null,null,null,0,null,null,null,null,null,0,null,null,null,null,0,0,null,null,null,null,null,null,null,null,1,0,0,0,null,0,1,1,1,null,0,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,null,null,null,null,0,null,null,null]},{"name":"GDS\/GenericPortalAdapter\/Request\/RegisterRequest.php","source":"<?php\n\nnamespace VasilDakov\\GDS\\GenericPortalAdapter\\Request;\n\nuse VasilDakov\\GDS\\GenericPortalAdapter\\Collection\\PlayerPropertyCollection;\n\nclass RegisterRequest {\n\n\tpublic $systemUID;\n\n\tpublic $clientUID;\n\n\tpublic $partnerUID;\n\n\tpublic $ipAddress;\n\n\tpublic $promotionCode;\n\n\tpublic $visitorID;\n\n\tpublic $registrationLevel;\n\n\tpublic $properties;\n\n\n\tpublic function __construct() \n\t{\n\t\t$this->properties = new PlayerPropertyCollection;\n\t}\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,null]},{"name":"GDS\/UsercustService.php","source":"<?php\n\/**\n * UsercustService Client\n * \n * @author    Vasil Dakov <vasildakov@gmail.com>\n * @copyright Copyright 2014 Vasil Dakov\n * @package   GDS\\UsercustService\n *\/\n \nnamespace VasilDakov\\GDS;\n\nuse SoapClient;\n\nclass UsercustService extends \\SoapClient {\n\n\tpublic function __construct() \n\t{\n\n\t}\n\n\t\/**\n\t * 9.1\n\t * @param AuthenticateCustRequest $request\n\t *\/\n\tpublic function UserCust_AuthenticateCust(AuthenticateCustRequest $request) {}\n\n\n\t\/**\n\t * 9.2\n\t * @param DepositReloadBonusRequest $request\n\t *\/\n\tpublic function UserCust_DepositReloadBonus(DepositReloadBonusRequest $request) {}\n\n\n\t\/**\n\t * 9.3\n\t * @param FPPBonusRequest $request\n\t *\/\n\tpublic function UserCust_FPPBonus(FPPBonusRequest $request) {}\n\n\n\t\/**\n\t * 9.4\n\t * @param GetLockStatusRequest $request\n\t *\/\n\tpublic function UserCust_GetLockStatus(GetLockStatusRequest $request) {}\n\n\n\t\/**\n\t * 9.5\n\t * @param GetUserDetailsRequest $request\n\t *\/\n\tpublic function UserCust_GetUserDetails(GetUserDetailsRequest $request) {}\n\n\t\/**\n\t * 9.6\n\t * @param LobbyTablesNTournamentsRequest $request\n\t *\/\n\tpublic function UserCust_LobbyTablesNTournaments(LobbyTablesNTournamentsRequest $request) {}\n\n\n\t\/**\n\t * 9.7\n\t * @param PlayersNTablesRequest $request\n\t *\/\n\tpublic function UserCust_PlayersNTables(PlayersNTablesRequest $request) {}\n\n\n\t\/**\n\t * 9.8\n\t * @param PullFlashClientTableIdsRequest $request\n\t *\/\n\tpublic function UserCust_PullFlashClientTableIds(PullFlashClientTableIdsRequest $request) {}\n\n\n\t\/**\n\t * 9.9\n\t * @param RakedHandsBonusRequest $request\n\t *\/\n\tpublic function UserCust_RakedHandsBonus(RakedHandsBonusRequest $request) {}\n\n\n\t\/**\n\t * 9.10\n\t * @param ReferAFriendBonusReferedToRequest $request\n\t *\/\n\tpublic function UserCust_ReferAFriendBonusReferedTo(ReferAFriendBonusReferedToRequest $request) {}\n\n\n\t\/**\n\t * 9.11\n\t * @param ReferAFriendBonusReferingRequest $request\n\t *\/\n\tpublic function UserCust_ReferAFriendBonusRefering(ReferAFriendBonusReferingRequest $request) {}\n\n\n\t\/**\n\t * 9.12\n\t * @param TournamentFeedRequest $request\n\t *\/\n\tpublic function UserCust_TournamentFeed(TournamentFeedRequest $request) {}\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"GDS\/WarehouseService.php","source":"<?php\n\/**\n * WarehouseServices Client\n * \n * @author    Vasil Dakov <vasildakov@gmail.com>\n * @copyright Copyright 2014 Vasil Dakov\n * @package   GDS\n *\/\n\n\nnamespace VasilDakov\\GDS;\n\n\/\/ include __DIR__ . DIRECTORY_SEPARATOR . \"config.php\";\ninclude \".\/config\/config.php\";\n\nuse VasilDakov\\GDS\\WarehouseService\\PlayerPokerGamingActivityRequest;\nuse VasilDakov\\GDS\\WarehouseService\\PlayerPokerGamingActivityResponse;\nuse SoapClient;\n\n\nclass WarehouseService extends \\SoapClient {\n\n\tprivate static $classmap = array(\n\t\t'getPlayerPokerGamingActivity' => 'Warehouse_playerPokerGamingActivity',\n\t\t'getPlayerPokerGamingActivityResponse' => 'Warehouse_playerPokerGamingActivityResponse',\n\t\t'getPlayerRealMoneyTransaction' => 'Warehouse_PlayerRealMoneyTransaction',\n\t\t'getPlayerRealMoneyTransactionResponse' => 'Warehouse_PlayerRealMoneyTransactionResponse',\n\t\t'getPlayerBonusMoneyTransaction' => 'Warehouse_PlayerBonusMoneyTransaction',\n\t\t'getPlayerBonusMoneyTransactionResponse' => 'Warehouse_PlayerBonusMoneyTransactionResponse',\n\t\t'getDimensionPlayer' => 'Warehouse_DimensionPlayer',\n\t\t'getDimensionPlayerResponse' => 'Warehouse_DimensionPlayerResponse',\n\t\t'getDimensionPlayerAffiliate' => 'Warehouse_DimensionPlayerAffiliate',\n\t\t'getDimensionPlayerAffiliateResponse' => 'Warehouse_DimensionPlayerAffiliateResponse',\n\t\t'getDimensionGame' => 'Warehouse_DimensionGame',\n\t\t'getDimensionGameResponse' => 'Warehouse_DimensionGameResponse',\n\t\t'getDimensionProduct' => 'Warehouse_DimensionProduct',\n\t\t'getDimensionProductResponse' => 'Warehouse_DimensionProductResponse',\n\t\t'getGroupGameSession' => 'Warehouse_GroupGameSession',\n\t\t'getGroupGameSessionResponse' => 'Warehouse_GroupGameSessionResponse',\n\t\t'getReferCampaignReport' => 'Warehouse_ReferCampaignReport',\n\t\t'getReferCampaignReportResponse' => 'Warehouse_ReferCampaignReportResponse',\n\t\t'getTodaysAggScriptRuns' => 'Warehouse_TodaysAggScriptRuns',\n\t\t'getTodaysAggScriptRunsResponse' => 'Warehouse_TodaysAggScriptRunsResponse',\n\t\t'getCustomerAccountStates' => 'Warehouse_CustomerAccountStates',\n\t\t'getCustomerAccountStatesResponse' => 'Warehouse_CustomerAccountStatesResponse',\n\t\t'getAggPokerDaily' => 'Warehouse_AggPokerDaily',\n\t\t'getAggPokerDailyResponse' => 'Warehouse_AggPokerDailyResponse',\n\t\t'getAggCustProdDaily' => 'Warehouse_AggCustProdDaily',\n\t\t'getAggCustProdDailyResponse' => 'Warehouse_AggCustProdDailyResponse',\n\t\t'getAggTableDaily' => 'Warehouse_AggTableDaily',\n\t\t'getAggTableDailyResponse' => 'Warehouse_AggTableDailyResponse',\n\t\t'getAggSttDaily' => 'Warehouse_AggSttDaily',\n\t\t'getAggSttDailyResponse' => 'Warehouse_AggSttDailyResponse',\n\t\t'getAggMttDaily' => 'Warehouse_AggMttDaily',\n\t\t'getAggMttDailyResponse' => 'Warehouse_AggMttDailyResponse',\n\t\t'getAggProdDailyPlayerNumbers' => 'Warehouse_AggProdDailyPlayerNumbers',\n\t\t'getAggProdDailyPlayerNumbersResponse' => 'Warehouse_AggProdDailyPlayerNumbersResponse',\n\t\t'getAggProdGroupDailyRegistrations' => 'Warehouse_AggProdGroupDailyRegistrations',\n\t\t'getAggProdGroupDailyRegistrationsResponse' => 'Warehouse_AggProdGroupDailyRegistrationsResponse',\n\t\t'getAggLog' => 'Warehouse_AggLog',\n\t\t'getAggLogResponse' => 'Warehouse_AggLogResponse',\n\t\t'getDailyBalanceOut' => 'Warehouse_DailyBalanceOut',\n\t\t'getDailyBalanceOutResponse' => 'Warehouse_DailyBalanceOutResponse',\n\t\t'getSessionStakes' => 'Warehouse_SessionStakes',\n\t);\n\n\n\n\tpublic function __construct($wsdl = \"\", $options = array()) \n\t{\n\t\tif( !$wsdl ) throw new \\InvalidArgumentException;\n\t\t\n\t\tforeach(self::$classmap as $key => $value) {\n\t\t\tif(!isset($options['classmap'][$key])) {\n\t\t\t\t$options['classmap'][$key] = $value;\n\t\t\t}\n\t\t}\n\t\tparent::__construct($wsdl, $options);\n\t}\t\n\n\n\t\/**\n\t * 7.2\n\t * \n     * @param AggCustProdDailyRequest $request\n     * @return Warehouse_AggCustProdDailyResponse\n     *\/\n\tpublic function getAggCustProdDaily(AggCustProdDailyRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggCustProdDaily', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.3 \n\t * \n     * @param AggLogRequest $request\n     * @return Warehouse_AggLogResponse\n     *\/\n\tpublic function getAggLog(AggLogRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggLog', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.4\n\t * \n     * @param AggMttDailyRequest $request\n     * @return Warehouse_AggMttDailyResponse\n     *\/\n\tpublic function getAggMttDaily(AggMttDailyRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggMttDaily', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.5\n\t * \n     * @param AggPokerDailyRequest $request\n     * @return Warehouse_AggPokerDailyResponse\n     *\/\n\tpublic function getAggPokerDaily(AggPokerDailyRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggPokerDaily', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.6\n\t * \n     * @param AggProdDailyPlayerNumbersRequest $request\n     * @return Warehouse_AggProdDailyPlayerNumbersResponse\n     *\/\n\tpublic function getAggProdDailyPlayerNumbers(AggProdDailyPlayerNumbersRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggProdDailyPlayerNumbers', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.7 \n\t * \n     * @param AggProdGroupDailyRegistrationsRequest $request\n     * @return Warehouse_AggProdGroupDailyRegistrationsResponse\n     *\/\n\tpublic function getAggProdGroupDailyRegistrations(AggProdGroupDailyRegistrationsRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggProdGroupDailyRegistrations', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.8 \n\t * \n     * @param AggSttDailyRequest $request\n     * @return Warehouse_AggSttDailyResponse\n     *\/\n\tpublic function getAggSttDaily(AggSttDailyRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggSttDaily', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.9 \n\t * \n     * @param AggTableDailyRequest $request\n     * @return Warehouse_AggTableDailyResponse\n     *\/\n\tpublic function getAggTableDaily(AggTableDailyRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_AggTableDaily', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.10\n\t * \n     * @param CustomerAccountStatesRequest $request\n     * @return Warehouse_CustomerAccountStatesResponse\n     *\/\n\tpublic function getCustomerAccountStates(CustomerAccountStatesRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_CustomerAccountStates', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.11 This method gives the total sum of all real money and bonus money tied up in the gaming system\n\t * \n     * @param DailyBalanceOutRequest $request\n     * @return Warehouse_DailyBalanceOutResponse\n     *\/\n\tpublic function getDailyBalanceOut(DailyBalanceOutRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_DailyBalanceOut', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}  \n\n\n\t\/**\n\t * 7.12 Returns the game dimension.\n\t * \n     * @param DimensionGameRequest $request\n     * @return Warehouse_DimensionGameResponse\n     *\/\n\tpublic function getDimensionGame(DimensionGameRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_DimensionGame', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.13 Returns the player dimension with all available player attributes.\n\t * \n     * @param DimensionPlayerRequest $request\n     * @return Warehouse_DimensionPlayerResponse\n     *\/\n\tpublic function getDimensionPlayer(DimensionPlayerRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_DimensionPlayer', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.14\n\t * \n     * @param DimensionPlayerAffiliateRequest $request\n     * @return Warehouse_DimensionPlayerAffiliateResponse\n     *\/\n\tpublic function getDimensionPlayerAffiliate(DimensionPlayerAffiliateRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_DimensionPlayerAffiliate', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.15 Returns the product dimension including the products related to the supplied product ID.\n\t * \n     * @param DimensionProductRequest $request\n     * @return Warehouse_DimensionProductResponse\n     *\/\n\tpublic function getDimensionProduct(DimensionProductRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_DimensionProduct', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.16 Returns all game sessions for a given day.\n\t * \n     * @param GroupGameSessionRequest $request\n     * @return Warehouse_GroupGameSessionResponse\n     *\/\n\tpublic function getGroupGameSession(GroupGameSessionRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_GroupGameSession', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.17 Returns all bonus payouts and bonus conversions per player, product, bonus ID and day.\n\t * \n     * @param PlayerBonusMoneyTransactionRequest $request\n     * @return Warehouse_PlayerBonusMoneyTransactionResponse\n     *\/\n\tpublic function getPlayerBonusMoneyTransaction(PlayerBonusMoneyTransactionRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_PlayerBonusMoneyTransaction', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.18 Returns all real money transactions per player, product and day.\n\t * \n     * @param PlayerRealMoneyTransactionRequest $request\n     * @return Warehouse_PlayerRealMoneyTransactionResponse\n     *\/\n\tpublic function getPlayerRealMoneyTransaction(PlayerRealMoneyTransactionRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_playerRealMoneyTransaction', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n\t\/**\n\t * 7.19 \n     * @param ReferCampaignReportRequest $request\n     * @return Warehouse_ReferCampaignReportResponse\n     *\/\n\tpublic function getReferCampaignReport(ReferCampaignReportRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_ReferCampaignReport', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\t\/**\n\t * 7.20 This method gives the limittype and stakes connected to a specific game_session_id. \n\t * The method only returns data for cash play. Black jack is excluded.\n\t * \n     * @param SessionStakesRequest $request\n     * @return Warehouse_SessionStakesResponse\n     *\/\n\tpublic function getSessionStakes(SessionStakesRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_SessionStakes', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t\t)\n\t\t);\n\t}\n\n\n\t\/**\n\t * 7.21 The method returns how many scripts that will be run at the supplied date and how many of these that have been run. \n\t * If the figures match, then all scripts have been run.\n\t * \n     * @param TodaysAggScriptRunsRequest $request\n     * @return Warehouse_TodaysAggScriptRunsResponse\n     *\/\n\tpublic function getTodaysAggScriptRuns(TodaysAggScriptRunsRequest $request) \n\t{\n\t\treturn $this->__soapCall('Warehouse_TodaysAggScriptRuns', array($request), array(\n\t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n\t\t\t'soapaction' => ''\n\t\t));\n\t}\n\n\n  \t\/**\n  \t * 7.22 The method returns key poker figures per player, game, product and day.\n  \t * \n     * @param PlayerPokerGamingActivityRequest $request\n     * @return Warehouse_playerPokerGamingActivityResponse\n     *\/\n  \tpublic function getPlayerPokerGamingActivity(PlayerPokerGamingActivityRequest $request) \n  \t{\n  \t\treturn $this->__soapCall('Warehouse_playerPokerGamingActivity', array($request), array(\n  \t\t\t'uri' => 'bosscasinos\/GDS\/WarehouseServices\/',\n  \t\t\t'soapaction' => ''\n  \t\t));\n  \t}\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,6,6,6,6,6,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null]}],"environment":{"packagist_version":"0.7.0-dev"}}